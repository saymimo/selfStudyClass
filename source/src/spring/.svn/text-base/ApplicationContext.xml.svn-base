<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd
	">
	
	<!-- 启用注解 -->
	<context:annotation-config />
	
	<!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描 -->
	<context:component-scan base-package="com.ssc">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- 定时执行任务   -->
	
	<!-- 查询云端数据并添加到数据库  每天上午10点  15 23  -->
<bean id="SchedulerTask" class="org.springframework.scheduling.quartz.JobDetailBean">
  <property name="jobClass">
   <value>com.ssc.quartz.SchedulerTest</value>
  </property>
</bean>
 

 <!-- 每天 10：00 点 -->
<bean id="SchedulerTaskTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
  <property name="jobDetail" ref="SchedulerTask" />
  <property name="cronExpression">
   <value>0 0 10 * * ?</value>   <!-- 0 0/1 * * * ?     每分钟运行一次 -->
  </property>
 </bean>
 
 
 
<!-- 每天 15：00 点 -->
 <bean id="SchedulerTaskTrigger2" class="org.springframework.scheduling.quartz.CronTriggerBean">
  <property name="jobDetail" ref="SchedulerTask" />
 <property name="cronExpression">
   <value>0 0 15 * * ?</value>
  </property>
 </bean>
 
 <!-- 每天 23：00 点 -->
 <bean id="SchedulerTaskTrigger3" class="org.springframework.scheduling.quartz.CronTriggerBean">
  <property name="jobDetail" ref="SchedulerTask" />
 <property name="cronExpression">
   <value>0 0 23 * * ?</value>
  </property>
 </bean>
 
<!-- 获取access_token 和 jssdk_ticket -->
<bean id="GetWeixinATAndJT" class="org.springframework.scheduling.quartz.JobDetailBean">
	<property name="jobClass">
		<value>com.ssc.quartz.GetWeixinAccessToken</value>
	</property>
</bean> 

<!-- 每隔100分钟获取一次access_token和jssdk_ticket  -->
<bean id="SchedulerAccessTokenAndJssdkTicket" class="org.springframework.scheduling.quartz.CronTriggerBean">
	<property name="jobDetail" ref="GetWeixinATAndJT" />
 	<property name="cronExpression">
   		<value>0 0/100 * * * ?</value>
  	</property>
</bean>
 
<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
  <property name="triggers">
   <list>
    <ref bean="SchedulerTaskTrigger" />
    <ref bean="SchedulerTaskTrigger2" />
    <ref bean="SchedulerTaskTrigger3" />
    <ref bean="RemoveFilePerviewTrigger" />
   </list>
  </property>
 </bean>
 <!-- 定时执行任务   -->
   
 
 <!-- 删除文件开始 -->
 	<!-- 查询云端数据并添加到数据库  每天上午10点  15 23  -->
<bean id="RemoveFilePerview" class="org.springframework.scheduling.quartz.JobDetailBean">
  <property name="jobClass">
   <value>com.ssc.quartz.RemoveFilePerview</value>
  </property>
</bean>
 

 <!-- 每天 10：00 点 -->
<bean id="RemoveFilePerviewTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
  <property name="jobDetail" ref="RemoveFilePerview" />
  <property name="cronExpression">
   <value>0 0 23 * * ?</value>   <!-- 0 0/1 * * * ?     每分钟运行一次 --><!-- 0 0 16 * * ? -->
  </property>
 </bean>
 
 
  <!-- 删除文件结束 -->
 
	
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">   
    	<property name="dataSource" ref="dataSource"></property>
 	</bean>
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
		<property name="locations">  
			<list>  
                 <value>/WEB-INF/classes/dbconfig.properties</value>  
            </list>  
        </property>  
	</bean> 
	
	<!-- 阿里 druid数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
         <!-- 数据库基本信息配置 -->
         <property name="url" value="${url}" />  
         <property name="username" value="${username}" />  
         <property name="password" value="${password}" />  
         <property name="driverClassName" value="${driverClassName}" />  
         <property name="filters" value="${filters}" />  
   		 <!-- 最大并发连接数 -->
         <property name="maxActive" value="${maxActive}" />
         <!-- 初始化连接数量 -->
         <property name="initialSize" value="${initialSize}" />
         <!-- 配置获取连接等待超时的时间 -->
         <property name="maxWait" value="${maxWait}" />
         <!-- 最小空闲连接数 -->
         <property name="minIdle" value="${minIdle}" />  
   		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />  
         <property name="validationQuery" value="${validationQuery}" />  
         <property name="testWhileIdle" value="${testWhileIdle}" />  
         <property name="testOnBorrow" value="${testOnBorrow}" />  
         <property name="testOnReturn" value="${testOnReturn}" />  
         <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
         <!-- 打开removeAbandoned功能 -->
         <property name="removeAbandoned" value="${removeAbandoned}" />
         <!-- 1800秒，也就是30分钟 -->
         <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
         <!-- 关闭abanded连接时输出错误日志 -->   
         <property name="logAbandoned" value="${logAbandoned}" />
	</bean>  
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 事物处理 -->
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* com.ssc.service..*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>
	
	<!-- 配置mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
        <!-- mapper扫描 -->
        <property name="mapperLocations" value="classpath:mybatis/*/*.xml"></property>
    </bean>
    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<!-- ================ Shiro start ================ -->
		<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
			<property name="realm" ref="ShiroRealm" />
		</bean>
		
		<!-- 項目自定义的Realm -->
	    <bean id="ShiroRealm" class="com.ssc.interceptor.shiro.ShiroRealm" ></bean>
		
		<!-- Shiro Filter -->
		<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
			<property name="securityManager" ref="securityManager" />
			
			<property name="loginUrl" value="/" />
			
			<property name="successUrl" value="/main/index" />
			
			<property name="unauthorizedUrl" value="/login_toLogin" />
			
			<property name="filterChainDefinitions">
				<value>
				/MP_verify_nNem99XhOmY1LlfC.txt					= anon
				/jquery-weui-build/**		= anon
				/controller/system/**		= anon
				/static/loginTwo/** 		= anon
				/static/login/** 			= anon
				/static/js/myjs/** 			= authc
				/static/js/** 				= anon
				/static/css/**				= anon
				/static/images/**			= anon
				/static/img/**				= anon
				/static/qiniu/**			= anon
				/static/assets/**			= anon
				/pdf/**						= anon
				/plugins/**					= anon
				/uploadFiles/uploadImgs/** 	= anon
	           	/code.do 					= anon
	           	/login_login	 			= anon
	           	/login_toLoginHome			= anon
	           	/saveStructApply			= anon
	           	/toRegister			    	= anon
	           	/login_toRegisterSave		= anon
	           	/app**/** 					= anon
	           	/weixin/** 					= anon
	           	/weixinMenu/**	 			= anon
	           	
	            /aboutFile/**				= anon
	           	/meetinginfo/**				= anon
	           	/taskinfo/**				= anon
	           	/entrust/**					= anon
	           	/safeApply/**				= anon
	           	/billApply/**				= anon
	           	/projectPact/**				= anon
	           	/borrow/**					= anon
	           	/tenderinfo/**				= anon
	           	/ttpactinfo/**				= anon
		
	           	/**							= authc
	           	/WebRoot/crossdomain.xml    = anon
	           
	           	
				</value>
			</property>
		</bean>
	<!-- ================ Shiro end ================ -->
	
   
</beans>
