<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="TtPurchaseDeclareMapper" >
  <resultMap id="BaseResultMap" type="com.ssc.entity.system.TtPurchaseDeclare" >
    <id column="PURCHASE_DECLARE_ID" property="purchaseDeclareId" jdbcType="VARCHAR" />
    <result column="PURCHASE_ID" property="purchaseId" jdbcType="VARCHAR" />
    <result column="DECLARE_NO" property="declareNo" jdbcType="VARCHAR" />
    <result column="DECLARE_NUM" property="declareNum" jdbcType="DECIMAL" />
    <result column="DECLARE_PRICE" property="declarePrice" jdbcType="DECIMAL" />
    <result column="DECLARE_AMOUNT" property="declareAmount" jdbcType="DECIMAL" />
    <result column="ITEM_ID" property="itemId" jdbcType="VARCHAR" />
    <result column="DECLARE_REMARK" property="declareRemark" jdbcType="VARCHAR" />
    <result column="INSTRUCTIONS_NUM" property="instructionsNum" jdbcType="DECIMAL" />
    <result column="INSTRUCTIONS_PRICE" property="instructionsPrice" jdbcType="DECIMAL" />
    <result column="INSTRUCTIONS_AOMUNT" property="instructionsAomunt" jdbcType="DECIMAL" />
    <result column="INSTRUCTIONS_REMARK" property="instructionsRemark" jdbcType="VARCHAR" />
    <result column="INSTRUCTIONS_USER" property="instructionsUser" jdbcType="VARCHAR" />
    <result column="INSTRUCTIONS_DATE" property="instructionsDate" jdbcType="DATE" />
    <result column="DECLARE_STATE" property="declareState" jdbcType="INTEGER" />
    <result column="IS_DEL" property="isDel" jdbcType="INTEGER" />
    <result column="CREATE_DATE" property="createDate" jdbcType="TIMESTAMP" />
    <result column="CREATE_BY" property="createBy" jdbcType="VARCHAR" />
    <result column="UPDATE_DATE" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="UPDATE_BY" property="updateBy" jdbcType="VARCHAR" />
    <result column="USER_NAME" property="userName" jdbcType="VARCHAR"/>
  </resultMap>
  <sql id="Base_Column_List" >
    PURCHASE_DECLARE_ID, PURCHASE_ID, DECLARE_NO, DECLARE_NUM, DECLARE_PRICE, DECLARE_AMOUNT, 
    ITEM_ID, DECLARE_REMARK, INSTRUCTIONS_NUM, INSTRUCTIONS_PRICE, INSTRUCTIONS_AOMUNT, 
    INSTRUCTIONS_REMARK, INSTRUCTIONS_USER, INSTRUCTIONS_DATE, DECLARE_STATE, IS_DEL, 
    CREATE_DATE, CREATE_BY, UPDATE_DATE, UPDATE_BY
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="pd" >
    select 
    <include refid="Base_Column_List" />
    from tt_purchase_declare
    where PURCHASE_DECLARE_ID = #{purchaseDeclareId,jdbcType=VARCHAR}
  </select>
  
  <!-- 计算选中工程量总和   sf -->
   <select id="countSeletect" resultType="pd" parameterType="pd" >
SELECT 
 IFNULL(SUM(tqd.QUOTA_CONSUMPTION),0 )AS countNUM
FROM
  `tt_task_declare` d 
  LEFT JOIN tt_taskinfo t 
    ON t.`UID` = d.`TASK_ID` 
  LEFT JOIN tt_iteminfo i 
    ON i.`ITEM_ID` = d.`ITEM_ID` 
  LEFT JOIN tt_task_quota_detail tqd 
    ON d.`TASK_QUOTA_DETAIL_ID` = tqd.`TASK_QUOTA_DETAIL_ID` 
WHERE d.`PURCHASE_ID` = #{PURCHASE_ID,jdbcType=VARCHAR} 
and d.`TASK_QUOTA_DETAIL_ID` in
<foreach item="item" index="index" collection="str" open="(" separator="," close=")">
                  #{item}
             </foreach>
  </select>
  <!-- 计算选中工程量总和   sf -->
  
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from tt_purchase_declare
    where PURCHASE_DECLARE_ID = #{purchaseDeclareId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.ssc.entity.system.TtPurchaseDeclare" >
    insert into tt_purchase_declare (PURCHASE_DECLARE_ID, PURCHASE_ID, DECLARE_NO, 
      DECLARE_NUM, DECLARE_PRICE, DECLARE_AMOUNT, 
      ITEM_ID, DECLARE_REMARK, INSTRUCTIONS_NUM, 
      INSTRUCTIONS_PRICE, INSTRUCTIONS_AOMUNT, 
      INSTRUCTIONS_REMARK, INSTRUCTIONS_USER, INSTRUCTIONS_DATE, 
      DECLARE_STATE, IS_DEL, CREATE_DATE, 
      CREATE_BY, UPDATE_DATE, UPDATE_BY
      )
    values (#{purchaseDeclareId,jdbcType=VARCHAR}, #{purchaseId,jdbcType=VARCHAR}, #{declareNo,jdbcType=VARCHAR}, 
      #{declareNum,jdbcType=DECIMAL}, #{declarePrice,jdbcType=DECIMAL}, #{declareAmount,jdbcType=DECIMAL}, 
      #{itemId,jdbcType=VARCHAR}, #{declareRemark,jdbcType=VARCHAR}, #{instructionsNum,jdbcType=DECIMAL}, 
      #{instructionsPrice,jdbcType=DECIMAL}, #{instructionsAomunt,jdbcType=DECIMAL}, 
      #{instructionsRemark,jdbcType=VARCHAR}, #{instructionsUser,jdbcType=VARCHAR}, #{instructionsDate,jdbcType=DATE}, 
      #{declareState,jdbcType=INTEGER}, #{isDel,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}, 
      #{createBy,jdbcType=VARCHAR}, #{updateDate,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="pd" >
    insert into tt_purchase_declare
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="purchaseDeclareId != null" >
        PURCHASE_DECLARE_ID,
      </if>
      <if test="purchaseId != null" >
        PURCHASE_ID,
      </if>
      <if test="declareNo != null" >
        DECLARE_NO,
      </if>
      <if test="declareNum != null" >
        DECLARE_NUM,
      </if>
      <if test="declarePrice != null" >
        DECLARE_PRICE,
      </if>
      <if test="declareAmount != null" >
        DECLARE_AMOUNT,
      </if>
      <if test="itemId != null" >
        ITEM_ID,
      </if>
      <if test="declareRemark != null" >
        DECLARE_REMARK,
      </if>
      <if test="instructionsNum != null" >
        INSTRUCTIONS_NUM,
      </if>
      <if test="instructionsPrice != null" >
        INSTRUCTIONS_PRICE,
      </if>
      <if test="instructionsAomunt != null" >
        INSTRUCTIONS_AOMUNT,
      </if>
      <if test="instructionsRemark != null" >
        INSTRUCTIONS_REMARK,
      </if>
      <if test="instructionsUser != null" >
        INSTRUCTIONS_USER,
      </if>
      <if test="instructionsDate != null" >
        INSTRUCTIONS_DATE,
      </if>
      <if test="declareState != null" >
        DECLARE_STATE,
      </if>
      <if test="isDel != null" >
        IS_DEL,
      </if>
      <if test="createDate != null" >
        CREATE_DATE,
      </if>
      <if test="createBy != null" >
        CREATE_BY,
      </if>
      <if test="updateDate != null" >
        UPDATE_DATE,
      </if>
      <if test="updateBy != null" >
        UPDATE_BY,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="purchaseDeclareId != null" >
        #{purchaseDeclareId,jdbcType=VARCHAR},
      </if>
      <if test="purchaseId != null" >
        #{purchaseId,jdbcType=VARCHAR},
      </if>
      <if test="declareNo != null" >
        #{declareNo,jdbcType=VARCHAR},
      </if>
      <if test="declareNum != null" >
        #{declareNum,jdbcType=DECIMAL},
      </if>
      <if test="declarePrice != null" >
        #{declarePrice,jdbcType=DECIMAL},
      </if>
      <if test="declareAmount != null" >
        #{declareAmount,jdbcType=DECIMAL},
      </if>
      <if test="itemId != null" >
        #{itemId,jdbcType=VARCHAR},
      </if>
      <if test="declareRemark != null" >
        #{declareRemark,jdbcType=VARCHAR},
      </if>
      <if test="instructionsNum != null" >
        #{instructionsNum,jdbcType=DECIMAL},
      </if>
      <if test="instructionsPrice != null" >
        #{instructionsPrice,jdbcType=DECIMAL},
      </if>
      <if test="instructionsAomunt != null" >
        #{instructionsAomunt,jdbcType=DECIMAL},
      </if>
      <if test="instructionsRemark != null" >
        #{instructionsRemark,jdbcType=VARCHAR},
      </if>
      <if test="instructionsUser != null" >
        #{instructionsUser,jdbcType=VARCHAR},
      </if>
      <if test="instructionsDate != null" >
        #{instructionsDate,jdbcType=DATE},
      </if>
      <if test="declareState != null" >
        #{declareState,jdbcType=INTEGER},
      </if>
      <if test="isDel != null" >
        #{isDel,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null" >
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null" >
        #{updateBy,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="pd" >
    update tt_purchase_declare
    <set >
      <if test="purchaseId != null" >
        PURCHASE_ID = #{purchaseId,jdbcType=VARCHAR},
      </if>
      <if test="declareNo != null" >
        DECLARE_NO = #{declareNo,jdbcType=VARCHAR},
      </if>
      <if test="declareNum != null" >
        DECLARE_NUM = #{declareNum,jdbcType=DECIMAL},
      </if>
      <if test="declarePrice != null" >
        DECLARE_PRICE = #{declarePrice,jdbcType=DECIMAL},
      </if>
      <if test="declareAmount != null" >
        DECLARE_AMOUNT = #{declareAmount,jdbcType=DECIMAL},
      </if>
      <if test="itemId != null" >
        ITEM_ID = #{itemId,jdbcType=VARCHAR},
      </if>
      <if test="declareRemark != null" >
        DECLARE_REMARK = #{declareRemark,jdbcType=VARCHAR},
      </if>
      <if test="instructionsNum != null" >
        INSTRUCTIONS_NUM = #{instructionsNum,jdbcType=DECIMAL},
      </if>
      <if test="instructionsPrice != null" >
        INSTRUCTIONS_PRICE = #{instructionsPrice,jdbcType=DECIMAL},
      </if>
      <if test="instructionsAomunt != null" >
        INSTRUCTIONS_AOMUNT = #{instructionsAomunt,jdbcType=DECIMAL},
      </if>
      <if test="instructionsRemark != null" >
        INSTRUCTIONS_REMARK = #{instructionsRemark,jdbcType=VARCHAR},
      </if>
      <if test="instructionsUser != null" >
        INSTRUCTIONS_USER = #{instructionsUser,jdbcType=VARCHAR},
      </if>
      <if test="instructionsDate != null" >
        INSTRUCTIONS_DATE = #{instructionsDate,jdbcType=DATE},
      </if>
      <if test="declareState != null" >
        DECLARE_STATE = #{declareState,jdbcType=INTEGER},
      </if>
      <if test="isDel != null" >
        IS_DEL = #{isDel,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null" >
        CREATE_BY = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateDate != null" >
        UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null" >
        UPDATE_BY = #{updateBy,jdbcType=VARCHAR},
      </if>
    </set>
    where PURCHASE_DECLARE_ID = #{purchaseDeclareId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ssc.entity.system.TtPurchaseDeclare" >
    update tt_purchase_declare
    set PURCHASE_ID = #{purchaseId,jdbcType=VARCHAR},
      DECLARE_NO = #{declareNo,jdbcType=VARCHAR},
      DECLARE_NUM = #{declareNum,jdbcType=DECIMAL},
      DECLARE_PRICE = #{declarePrice,jdbcType=DECIMAL},
      DECLARE_AMOUNT = #{declareAmount,jdbcType=DECIMAL},
      ITEM_ID = #{itemId,jdbcType=VARCHAR},
      DECLARE_REMARK = #{declareRemark,jdbcType=VARCHAR},
      INSTRUCTIONS_NUM = #{instructionsNum,jdbcType=DECIMAL},
      INSTRUCTIONS_PRICE = #{instructionsPrice,jdbcType=DECIMAL},
      INSTRUCTIONS_AOMUNT = #{instructionsAomunt,jdbcType=DECIMAL},
      INSTRUCTIONS_REMARK = #{instructionsRemark,jdbcType=VARCHAR},
      INSTRUCTIONS_USER = #{instructionsUser,jdbcType=VARCHAR},
      INSTRUCTIONS_DATE = #{instructionsDate,jdbcType=DATE},
      DECLARE_STATE = #{declareState,jdbcType=INTEGER},
      IS_DEL = #{isDel,jdbcType=INTEGER},
      CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      CREATE_BY = #{createBy,jdbcType=VARCHAR},
      UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
      UPDATE_BY = #{updateBy,jdbcType=VARCHAR}
    where PURCHASE_DECLARE_ID = #{purchaseDeclareId,jdbcType=VARCHAR}
  </update>
  
   <select id="listPageAllPurchaseDeclare" resultType="pd" parameterType="page" >
   SELECT 
  PURCHASE_DECLARE_ID AS purchaseDeclareId,
  PURCHASE_ID AS purchaseId,
  DECLARE_NO AS declareNo,
  DECLARE_NUM AS declareNum,
  DECLARE_PRICE AS declarePrice,
  DECLARE_AMOUNT AS declareAmount,
  (SELECT 
    i.`ITEM_NAME` 
  FROM
    `tt_iteminfo` i 
  WHERE i.`ITEM_ID` = t.ITEM_ID) AS itemId,
  ITEM_ID,
  DECLARE_REMARK AS declareRemark,
  INSTRUCTIONS_NUM AS instructionsNum,
  INSTRUCTIONS_PRICE AS instructionsPrice,
  INSTRUCTIONS_AOMUNT AS instructionsAomunt,
  (SELECT 
    s.`NAME` 
  FROM
    sys_user s 
  WHERE s.`USER_ID` = t.CREATE_BY) AS userName,
  INSTRUCTIONS_REMARK AS instructionsRemark,
  INSTRUCTIONS_USER AS instructionsUser,
  INSTRUCTIONS_DATE AS instructionsDate,
  DECLARE_STATE AS declareState,
  IS_DEL AS isDel,
  CREATE_DATE AS createDate,
  CREATE_BY AS createBy,
  UPDATE_DATE AS updateDate,
  UPDATE_BY  AS  updateBy
FROM
  tt_purchase_declare t
    where PURCHASE_ID = #{pd.purchaseId,jdbcType=VARCHAR} and IS_DEL=0
  </select>
  
  <!-- 查询消耗明细 -->
     <select id="listPageAllPurchaseXiaohao" resultType="pd" parameterType="page" >
     SELECT 
	 tqd.TASK_QUOTA_DETAIL_ID, i.`ITEM_NAME`,d.`TASK_DECLARE_ID`,
	 IFNULL((SELECT taskName(t.UID) ),'') AS TASK_NAME,
	 t.START,(SELECT s.`NAME` FROM `sys_user` s WHERE s.`USER_ID`=t.CONSTRUCTION_USER) as CONSTRUCTION_USER, tqd.QUOTA_CONSUMPTION,tqd.IS_PURCHASE,
	 (SELECT NAME FROM sys_user u WHERE u.USER_ID=tqd.APPLY_BY) AS  APPLY_NAME
	FROM
	  `tt_task_declare` d 
	  LEFT JOIN tt_taskinfo t 
	    ON t.`UID` = d.`TASK_ID` 
	  LEFT JOIN tt_iteminfo  i ON i.`ITEM_ID`=d.`ITEM_ID` 
	  LEFT JOIN tt_task_quota_detail tqd ON d.`TASK_QUOTA_DETAIL_ID`=tqd.`TASK_QUOTA_DETAIL_ID`
	WHERE d.`PURCHASE_ID` = #{pd.purchaseId,jdbcType=VARCHAR}
	
	<if test="pd.NAME != null and pd.NAME != ''"><!-- 关键词检索 -->
			and
				(
					 i.`ITEM_NAME` LIKE CONCAT(CONCAT('%', #{pd.NAME}),'%')
						 or 
					(SELECT  taskName (t.UID)) LIKE CONCAT(CONCAT('%', #{pd.NAME}),'%') 
						or 
					tqd.APPLY_BY IN (SELECT u.`USER_ID` FROM `sys_user` u WHERE u.`NAME` LIKE CONCAT(CONCAT('%', #{pd.NAME}),'%'))
				)
		</if>
  </select>
  
  
    <!-- 查询消耗明细 -->
     <select id="listPurchaseXiaohaoTab" resultType="pd" parameterType="page" >
     SELECT 
	 tqd.TASK_QUOTA_DETAIL_ID, i.`ITEM_NAME`,d.`TASK_DECLARE_ID`,
	 IFNULL((SELECT taskName(t.UID) ),'') AS TASK_NAME,
	 t.START,(SELECT s.`NAME` FROM `sys_user` s WHERE s.`USER_ID`=t.CONSTRUCTION_USER) as CONSTRUCTION_USER, tqd.QUOTA_CONSUMPTION,tqd.IS_PURCHASE,
	 (SELECT NAME FROM sys_user u WHERE u.USER_ID=tqd.APPLY_BY) AS  APPLY_NAME
	FROM
	  `tt_task_declare` d 
	  LEFT JOIN tt_taskinfo t 
	    ON t.`UID` = d.`TASK_ID` 
	  LEFT JOIN tt_iteminfo  i ON i.`ITEM_ID`=d.`ITEM_ID` 
	  LEFT JOIN tt_task_quota_detail tqd ON d.`TASK_QUOTA_DETAIL_ID`=tqd.`TASK_QUOTA_DETAIL_ID`
	WHERE d.`PURCHASE_ID` = #{pd.purchaseId,jdbcType=VARCHAR}
	
	<if test="pd.NAME != null and pd.NAME != ''"><!-- 关键词检索 -->
			and
				(
					 i.`ITEM_NAME` LIKE CONCAT(CONCAT('%', #{pd.NAME}),'%')
						 or 
					(SELECT  taskName (t.UID)) LIKE CONCAT(CONCAT('%', #{pd.NAME}),'%') 
						or 
					tqd.APPLY_BY IN (SELECT u.`USER_ID` FROM `sys_user` u WHERE u.`NAME` LIKE CONCAT(CONCAT('%', #{pd.NAME}),'%'))
				)
		</if>
  </select>
  	<!-- 删除 -->
	  <update id="updateByIsDel" parameterType="pd">
  		 update tt_purchase_declare   set   IS_DEL = 1 where PURCHASE_DECLARE_ID=#{purchaseDeclareId}
	  </update>
	  <!-- 查询审批详情 -->
	   <select id="findPurchaseDeclareManageByDeclareId" resultMap="BaseResultMap" parameterType="pd" >
	    select 
	     PURCHASE_DECLARE_ID, PURCHASE_ID, DECLARE_NO, DECLARE_NUM, DECLARE_PRICE, DECLARE_AMOUNT, 
	    (SELECT i.`ITEM_NAME` FROM `tt_iteminfo` i WHERE i.`ITEM_ID`=t.ITEM_ID) as ITEM_ID
	    , DECLARE_REMARK, INSTRUCTIONS_NUM, INSTRUCTIONS_PRICE, INSTRUCTIONS_AOMUNT, 
	    INSTRUCTIONS_REMARK,(SELECT u.`NAME` FROM `sys_user` u WHERE u.`USER_ID`=t.INSTRUCTIONS_USER) as  INSTRUCTIONS_USER, INSTRUCTIONS_DATE, DECLARE_STATE, IS_DEL, 
	    CREATE_DATE,
	    (SELECT u.`NAME` FROM `sys_user` u WHERE u.`USER_ID`=t.CREATE_BY) as 
	     CREATE_BY, UPDATE_DATE, UPDATE_BY
	    from tt_purchase_declare t
	    where PURCHASE_DECLARE_ID = #{purchaseDeclareId,jdbcType=VARCHAR}
  </select>
   <select id="listPurchaseDeclareListByItemStorageid" resultType="pd" parameterType="page" >
		    SELECT
		    
		    PURCHASE_DECLARE_ID AS purchaseDeclareId,
  PURCHASE_ID AS purchaseId,
  DECLARE_NO AS declareNo,
  DECLARE_NUM AS declareNum,
  DECLARE_PRICE declarePrice,
  DECLARE_AMOUNT declareAmount,
  ITEM_ID itemId,
  DECLARE_REMARK declareRemark,
  INSTRUCTIONS_NUM instructionsNum,
  INSTRUCTIONS_PRICE instructionsPrice,
  INSTRUCTIONS_AOMUNT instructionsAomunt,
  INSTRUCTIONS_REMARK instructionsRemark,
  INSTRUCTIONS_USER instructionsUser,
  INSTRUCTIONS_DATE instructionsDate,
  DECLARE_STATE declareState,
  IS_DEL isDel,
  CREATE_DATE createDate,
  CREATE_BY createBy,
  UPDATE_DATE updateDate,
  UPDATE_BY updateBy,
  IFNULL((d.`INSTRUCTIONS_NUM`), 0) AS shenpiNum,
  IFNULL(
    (SELECT 
      SUM(i.`NUM`) 
    FROM
      tt_in_storage i 
    WHERE i.`SPECIFICATION` = d.`DECLARE_NO` 
      AND i.review_state = 1),
    0
  ) AS rukuNum ,
    IFNULL((d.`INSTRUCTIONS_NUM`), 0)-IFNULL(
    (SELECT 
      SUM(i.`NUM`) 
    FROM
      tt_in_storage i 
    WHERE i.`SPECIFICATION` = d.`DECLARE_NO` 
      AND i.review_state = 1),
    0
  ) AS chaNum
		    
		     FROM `tt_purchase_declare` d WHERE d.`PURCHASE_ID`=(
		SELECT p.`PURCHASE_ID` FROM `tt_purchase` p LEFT JOIN tt_item_storage i  ON i.`NAME`=p.`NAME` AND i.`SPECIFICATION`=p.`SPECIFICATION`
		AND i.`UNIT`=p.`UNIT`
		WHERE i.`ITEM_STORAGE_ID`=#{pd.itemStorageId}
		
		) AND d.`DECLARE_STATE`=1  and ITEM_ID=#{pd.ITEM_ID} 
		<if test="pd.NAME != null and pd.NAME != ''"><!-- 关键词检索 -->
			and
				(
					 DECLARE_NO LIKE CONCAT(CONCAT('%', #{pd.NAME}),'%')
				)
		</if>
		<if test="pd.LASTLOGINSTART1 !=null and pd.LASTLOGINSTART1 != '' ">
		 		
		 		AND CREATE_DATE  &gt;=#{pd.LASTLOGINSTART1}
		 	
		</if>
		<if test="pd.LASTLOGINSTART2 !=null and pd.LASTLOGINSTART2 != '' ">
			 AND CREATE_DATE &lt;=#{pd.LASTLOGINSTART2} 
		 	</if>
		   GROUP BY d.DECLARE_NO
  ORDER BY chaNum DESC

  </select>
  
  
  
  
    <select id="listPurchaseDeclareListByPurDecId" resultType="pd" parameterType="page" >
		    SELECT
		    
		    PURCHASE_DECLARE_ID AS purchaseDeclareId,
  PURCHASE_ID AS purchaseId,
  DECLARE_NO AS declareNo,
  DECLARE_NUM AS declareNum,
  DECLARE_PRICE declarePrice,
  DECLARE_AMOUNT declareAmount,
  ITEM_ID itemId,
  DECLARE_REMARK declareRemark,
  INSTRUCTIONS_NUM instructionsNum,
  INSTRUCTIONS_PRICE instructionsPrice,
  INSTRUCTIONS_AOMUNT instructionsAomunt,
  INSTRUCTIONS_REMARK instructionsRemark,
  INSTRUCTIONS_USER instructionsUser,
  INSTRUCTIONS_DATE instructionsDate,
  DECLARE_STATE declareState,
  IS_DEL isDel,
  CREATE_DATE createDate,
  CREATE_BY createBy,
  UPDATE_DATE updateDate,
  UPDATE_BY updateBy,
  IFNULL((d.`INSTRUCTIONS_NUM`), 0) AS shenpiNum,
  IFNULL(
    (SELECT 
      SUM(i.`NUM`) 
    FROM
      tt_in_storage i 
    WHERE i.`SPECIFICATION` = d.`DECLARE_NO` 
      AND i.review_state = 1),
    0
  ) AS rukuNum ,
    IFNULL((d.`INSTRUCTIONS_NUM`), 0)-IFNULL(
    (SELECT 
      SUM(i.`NUM`) 
    FROM
      tt_in_storage i 
    WHERE i.`SPECIFICATION` = d.`DECLARE_NO` 
      AND i.review_state = 1),
    0
  ) AS chaNum
		    
		     FROM `tt_purchase_declare` d WHERE d.`PURCHASE_DECLARE_ID`=#{pd.purchaseDeclareId}
		     
		      AND d.`DECLARE_STATE`=1 
		<if test="pd.NAME != null and pd.NAME != ''"><!-- 关键词检索 -->
			and
				(
					 DECLARE_NO LIKE CONCAT(CONCAT('%', #{pd.NAME}),'%')
				)
		</if>
		<if test="pd.LASTLOGINSTART1 !=null and pd.LASTLOGINSTART1 != '' ">
		 		
		 		AND CREATE_DATE  &gt;=#{pd.LASTLOGINSTART1}
		 	
		</if>
		<if test="pd.LASTLOGINSTART2 !=null and pd.LASTLOGINSTART2 != '' ">
			 AND CREATE_DATE &lt;=#{pd.LASTLOGINSTART2} 
		 	</if>
		   GROUP BY d.DECLARE_NO
  ORDER BY chaNum DESC

  </select>
</mapper>