<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="TtReviewGroupMapper" >
  <resultMap id="BaseResultMap" type="com.ssc.entity.system.TtReviewGroup" >
    <id column="REVIEW_GROUP_ID" property="reviewGroupId" jdbcType="VARCHAR" />
    <result column="REVIEW_GROUP_NAME" property="reviewGroupName" jdbcType="VARCHAR" />
   <!--  <result column="TYPE" property="type" jdbcType="VARCHAR" /> -->
    <result column="CREATE_DATE" property="createDate" jdbcType="TIMESTAMP" />
    <result column="CREATE_BY" property="createBy" jdbcType="VARCHAR" />
    <result column="UPDATE_DATE" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="UPDATE_BY" property="updateBy" jdbcType="VARCHAR" />
      <result column="TYPE" property="type" jdbcType="VARCHAR" />
     <result column="LEVEL" property="level" jdbcType="INTEGER" />
    
    <result column="STRUCT_ID" property="structId" jdbcType="VARCHAR" />
    <result column="STRUCT_NAME" property="structName" jdbcType="VARCHAR" />
    <result column="GROUP_REMARK" property="groupRemark" jdbcType="VARCHAR" />
    <result column="IS_DEL" property="isDel" jdbcType="INTEGER" />
    <result column="GROUP_NO" property="groupNo" jdbcType="VARCHAR" />
    <result column="IS_CONFIRM" property="isConfirm" jdbcType="INTEGER" />
    
    
    
    
  </resultMap>
  <sql id="Base_Column_List" >
    REVIEW_GROUP_ID, REVIEW_GROUP_NAME, CREATE_DATE, CREATE_BY, UPDATE_DATE, UPDATE_BY,STRUCT_ID,GROUP_REMARK,IS_DEL,GROUP_NO,IS_CONFIRM,TYPE,level
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from tt_review_group
    where REVIEW_GROUP_ID = #{reviewGroupId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from tt_review_group
    where REVIEW_GROUP_ID = #{reviewGroupId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.ssc.entity.system.TtReviewGroup" >
    insert into tt_review_group (REVIEW_GROUP_ID, REVIEW_GROUP_NAME, 
      CREATE_DATE, CREATE_BY, UPDATE_DATE, 
      UPDATE_BY)
    values (#{reviewGroupId,jdbcType=VARCHAR}, #{reviewGroupName,jdbcType=VARCHAR}, 
      #{createDate,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR}, #{updateDate,jdbcType=TIMESTAMP}, 
      #{updateBy,jdbcType=VARCHAR})
  </insert>
  
  <!-- 如果当前登录的是集团公司查询的人员 -->
  <select id="findReviewGroupByUserJiTuan" parameterType="pd" resultType="pd">

  
  SELECT 
  				 u.USER_ID,
				u.USERNAME,
				u.PASSWORD,
				u.LAST_LOGIN,
				u.STRUCT_ID,
				u.NAME,
				u.IP,
				u.EMAIL,
				(SELECT 
				  GROUP_CONCAT(REVIEW_GROUP_NAME) 
				FROM
				  `tt_review_group` g 
				WHERE g.`REVIEW_GROUP_ID` IN 
				  (SELECT 
				    r.`TT_REVIEW_GROUP` 
				  FROM
				    tt_review_group_user r 
				  WHERE r.`USER_ID`  = u.USER_ID)) AS GROUP_NAME ,
				  (SELECT 
    GROUP_CONCAT(REVIEW_GROUP_ID) 
  FROM
    `tt_review_group` g 
  WHERE g.`REVIEW_GROUP_ID` IN 
    (SELECT 
      r.`TT_REVIEW_GROUP` 
    FROM
      tt_review_group_user r 
    WHERE r.`USER_ID` = u.USER_ID)) AS GROUP_ID,  
				(SELECT ss.`STRUCT_NAME` FROM  sys_structinfo ss WHERE ss.`STRUCT_ID`=u.STRUCT_ID) as STRUCT_NAME,
				u.NUMBER,
				u.PHONE,
				u.BM,
				(SELECT d.`NAME` FROM sys_dictionaries d WHERE d.`ZD_ID`=u.BM) as BM_NAME
   FROM `sys_user` u WHERE u.`USERNAME` IS NOT NULL AND u.`PASSWORD` IS NOT NULL
  </select>
  <!-- 根据主键Id查询已选择的人员 -->
   <select id="findUserById" parameterType="pd" resultType="pd">
   SELECT 
    u.`USER_ID`,
  u.`NAME`,
  (SELECT 
    i.STRUCT_NAME 
  FROM
    `sys_structinfo` i 
  WHERE i.STRUCT_ID = u.`STRUCT_ID`) AS STRUCT_NAME,
  (SELECT 
    GROUP_CONCAT(REVIEW_GROUP_NAME) 
  FROM
    `tt_review_group` o 
  WHERE o.STRUCT_ID = u.`STRUCT_ID`) AS GROUP_NAME 
FROM
  `tt_tribune_user` t,
  `sys_user` u 
WHERE t.`TRIBUNE_ID` = #{tribuneId}
  AND t.`USER_ID` = u.`USER_ID` 
  ORDER BY u.`CREATE_DATE` ASC 
   </select>
  
  <select id="findUserByIdNotIn" parameterType="pd" resultType="pd">
 SELECT 
  ts.USER_ID,
  ts.USERNAME,
  ts.PASSWORD,
  ts.LAST_LOGIN,
  ts.STRUCT_ID,
  ts.NAME,
  (SELECT 
    GROUP_CONCAT(REVIEW_GROUP_NAME) 
  FROM
    `tt_review_group` g 
  WHERE g.`REVIEW_GROUP_ID` IN 
    (SELECT 
      r.`TT_REVIEW_GROUP` 
    FROM
      tt_review_group_user r 
    WHERE r.`USER_ID` = ts.USER_ID)) AS GROUP_NAME,
    (SELECT 
    GROUP_CONCAT(REVIEW_GROUP_ID) 
  FROM
    `tt_review_group` g 
  WHERE g.`REVIEW_GROUP_ID` IN 
    (SELECT 
      r.`TT_REVIEW_GROUP` 
    FROM
      tt_review_group_user r 
    WHERE r.`USER_ID` = ts.USER_ID)) AS GROUP_ID,  
  (SELECT 
    ss.`STRUCT_NAME` 
  FROM
    sys_structinfo ss 
  WHERE ss.`STRUCT_ID` = ts.STRUCT_ID) AS STRUCT_NAME,
  ts.NUMBER,
  ts.PHONE,
  ts.BM,
  (SELECT 
    d.`NAME` 
  FROM
    sys_dictionaries d 
  WHERE d.`ZD_ID` = ts.BM) AS BM_NAME 
FROM
  `sys_user` ts 
WHERE ts.`USERNAME` IS NOT NULL 
  AND ts.`PASSWORD` IS NOT NULL 
  AND ts.`USER_ID` NOT IN 
  (SELECT 
    t.`USER_ID` 
  FROM
    `tt_tribune_user` t 
  WHERE t.`TRIBUNE_ID` =#{tribuneId})
  AND ts.`STRUCT_ID` IN 
  (SELECT 
    t.`STRUCT_ID` 
  FROM
    `tt_item_struct` t 
  WHERE t.`STRUCT_ID` = #{STRUCT_ID} 
    OR t.`CURRENT_STRUCT_ID` = #{STRUCT_ID}) 
  OR (ts.`STRUCT_ID` IN 
  (SELECT 
    t.`CURRENT_STRUCT_ID` 
  FROM
    `tt_item_struct` t 
  WHERE t.`STRUCT_ID` = #{STRUCT_ID} 
  OR t.`CURRENT_STRUCT_ID` = #{STRUCT_ID} )
			    or ts.`STRUCT_ID`= #{STRUCT_ID}
			    
			    
			    )
     AND ts.`USERNAME` IS NOT NULL 
  AND ts.`PASSWORD` IS NOT NULL 
    AND ts.`USER_ID` NOT IN 
  (SELECT 
    t.`USER_ID` 
  FROM
    `tt_tribune_user` t 
  WHERE t.`TRIBUNE_ID` = #{tribuneId})
  </select>
  <!--新审批-->
  <select id="findUserByIdNotInLevel" parameterType="pd" resultType="pd">
SELECT 
  ts.USER_ID,
  ts.USERNAME,
  ts.PASSWORD,
  ts.LAST_LOGIN,
  ts.STRUCT_ID,
  ts.NAME,
  ts.IP,
  ts.IDENTITYCODE,
  ts.EMAIL,
  (SELECT 
    GROUP_CONCAT(REVIEW_GROUP_NAME) 
  FROM
    `tt_review_group` g 
  WHERE g.`REVIEW_GROUP_ID` IN 
    (SELECT 
      r.`TT_REVIEW_GROUP` 
    FROM
      tt_review_group_user r 
    WHERE r.`USER_ID` = ts.USER_ID)) AS GROUP_NAME,
    (SELECT 
    GROUP_CONCAT(REVIEW_GROUP_ID) 
  FROM
    `tt_review_group` g 
  WHERE g.`REVIEW_GROUP_ID` IN 
    (SELECT 
      r.`TT_REVIEW_GROUP` 
    FROM
      tt_review_group_user r 
    WHERE r.`USER_ID` = ts.USER_ID)) AS GROUP_ID,  
    (SELECT 
    GROUP_CONCAT(REVIEW_GROUP_ID) 
  FROM
    `tt_review_group` g 
  WHERE g.`REVIEW_GROUP_ID` IN 
    (SELECT 
      r.`TT_REVIEW_GROUP` 
    FROM
      tt_review_group_user r 
    WHERE r.`USER_ID` = ts.USER_ID)) AS GROUP_ID,  
  (SELECT 
    ss.`STRUCT_NAME` 
  FROM
    sys_structinfo ss 
  WHERE ss.`STRUCT_ID` = ts.STRUCT_ID) AS STRUCT_NAME,
  ts.NUMBER,
  ts.PHONE,
  ts.BM,
  (SELECT 
    d.`NAME` 
  FROM
    sys_dictionaries d 
  WHERE d.`ZD_ID` = ts.BM) AS BM_NAME 
FROM
  `sys_user` ts 
WHERE ts.`USER_ID` IN 
  (SELECT 
    r.`USER_ID` 
  FROM
    `tt_review_group_user` r 
  WHERE
    (
      r.`STRUCT_ID` = #{STRUCT_ID} 
      OR r.`STRUCT_ID` = 
      (SELECT 
        s.`STRUCT_ID` 
      FROM
        `sys_structinfo` s 
      WHERE s.`STRUCTST_AGE` = 0)
    ))
    
  </select>
  
  
  
  <!-- 质检安检人员查询 -->
   <select id="findPerson" parameterType="pd" resultType="pd">
   	SELECT 
			  ts.USER_ID,
			  ts.USERNAME,
			  ts.PASSWORD,
			  ts.LAST_LOGIN,
			  ts.STRUCT_ID,
			  ts.NAME,
			  ts.IP,
			  ts.IDENTITYCODE,
			  ts.EMAIL,
			  (SELECT 
			    GROUP_CONCAT(REVIEW_GROUP_NAME) 
			  FROM
			    `tt_review_group` g 
			  WHERE g.`REVIEW_GROUP_ID` IN 
			    (SELECT 
			      r.`TT_REVIEW_GROUP` 
			    FROM
			      tt_review_group_user r 
			    WHERE r.`USER_ID` = ts.USER_ID)) AS GROUP_NAME,
			    (SELECT 
    GROUP_CONCAT(REVIEW_GROUP_ID) 
  FROM
    `tt_review_group` g 
  WHERE g.`REVIEW_GROUP_ID` IN 
    (SELECT 
      r.`TT_REVIEW_GROUP` 
    FROM
      tt_review_group_user r 
    WHERE r.`USER_ID` = ts.USER_ID)) AS GROUP_ID,  
			  (SELECT 
			    ss.`STRUCT_NAME` 
			  FROM
			    sys_structinfo ss 
			  WHERE ss.`STRUCT_ID` = ts.STRUCT_ID) AS STRUCT_NAME,
			  ts.NUMBER,
			  ts.PHONE,
			  ts.BM,
			  (SELECT 
			    d.`NAME` 
			  FROM
			    sys_dictionaries d 
			  WHERE d.`ZD_ID` = ts.BM) AS BM_NAME 
			FROM
			  `sys_user` ts 
			 
			  
			WHERE ts.`USERNAME` IS NOT NULL 
			
			  AND ts.`PASSWORD` IS NOT NULL 
			  AND (ts.`USER_ID` IN 
			  (SELECT 
			    t.`USER_ID` 
			  FROM
			    `tt_item_person` t 
			    WHERE t.`STRUCT_ID` =(SELECT k.`STRUCT_ID` FROM `tt_iteminfo` k WHERE k.`ITEM_ID`=#{itemId}) 
			    ) 
			 )
   </select>
  
  <!-- 如果当前登录的是区域公司查询的人员 -->
  
  <select id="findReviewGroupIdbyUserList" parameterType="pd" resultType="pd">
  SELECT 
  rgu.`USER_ID`,
  rgu.`LEVEL`,
  (SELECT u.`NAME` FROM `sys_user` u WHERE u.`USER_ID`=rgu.`USER_ID`) AS NAME,
  (SELECT s.`STRUCT_NAME` FROM `sys_structinfo` s WHERE s.`STRUCT_ID`=rgu.`STRUCT_ID` ) AS STRUCT_NAME,
  rgu.`STRUCT_ID`
FROM
  `tt_review_group_user` rgu 
WHERE rgu.`TT_REVIEW_GROUP` = #{reviewGroupId}
AND
	(
      rgu.`STRUCT_ID` = #{STRUCT_ID}
      OR rgu.`STRUCT_ID` = 
      (SELECT 
        s.`STRUCT_ID` 
      FROM
        `sys_structinfo` s 
      WHERE s.`STRUCTST_AGE` = 0)
    )
  ORDER BY rgu.`STRUCT_ID` 
   </select>
   
   
    <select id="findReviewGroupUserList" parameterType="pd" resultType="pd">
  SELECT 
  rgu.`USER_ID`,
  rgu.`LEVEL`,
  (SELECT u.`NAME` FROM `sys_user` u WHERE u.`USER_ID`=rgu.`USER_ID`) AS NAME,
  (SELECT s.`STRUCT_NAME` FROM `sys_structinfo` s WHERE s.`STRUCT_ID`=rgu.`STRUCT_ID` ) AS STRUCT_NAME,
  rgu.`STRUCT_ID`
FROM
  `tt_review_group_user` rgu 
WHERE rgu.`TT_REVIEW_GROUP` = #{reviewGroupId}
  ORDER BY rgu.`STRUCT_ID` 
   </select>
   
  <select id="findReviewGroupUserListNeiShen" parameterType="pd" resultType="pd">
  SELECT 
  rgu.`USER_ID`,
  rgu.`LEVEL`,
  (SELECT u.`NAME` FROM `sys_user` u WHERE u.`USER_ID`=rgu.`USER_ID`) AS NAME,
  (SELECT (select d.`NAME` FROM sys_dictionaries d WHERE d.`ZD_ID` = u.BM) as BM_NAME FROM `sys_user` u WHERE u.`USER_ID`=rgu.`USER_ID`) AS BM_NAME,
  (SELECT s.`STRUCT_NAME` FROM `sys_structinfo` s WHERE s.`STRUCT_ID`=rgu.`STRUCT_ID` ) AS STRUCT_NAME,
  rgu.`STRUCT_ID`
FROM
  `tt_review_group_user` rgu 
WHERE rgu.`TT_REVIEW_GROUP` = #{reviewGroupId}
  ORDER BY rgu.`STRUCT_ID` 
   </select>
   
  <select id="findReviewGroupUserListWaiShenGroupUserByGroup" parameterType="pd" resultType="pd">
  SELECT  
  rgu.`USER_ID`,
  rgu.`LEVEL`,
  (SELECT u.`NAME` FROM `sys_user` u WHERE u.`USER_ID`=rgu.`USER_ID`) AS NAME,
  (SELECT (select d.`NAME` FROM sys_dictionaries d WHERE d.`ZD_ID` = u.BM) as BM_NAME FROM `sys_user` u WHERE u.`USER_ID`=rgu.`USER_ID`) AS BM_NAME,
  (SELECT s.`STRUCT_NAME` FROM `sys_structinfo` s WHERE s.`STRUCT_ID`=rgu.`STRUCT_ID` ) AS STRUCT_NAME,
  rgu.`STRUCT_ID`
FROM
  `tt_review_group_user` rgu 
WHERE rgu.`TT_REVIEW_GROUP` = #{reviewGroupId} and 
	rgu.`STRUCT_ID` = 
      (SELECT 
        s.`STRUCT_ID` 
      FROM
        `sys_structinfo` s 
      WHERE s.`STRUCTST_AGE` = 0)
  ORDER BY rgu.`STRUCT_ID` 
   </select>
   
  <select id="findReviewGroupUserListWaiShenCompanyUserByGroup" parameterType="pd" resultType="pd">
  SELECT  
  rgu.`USER_ID`,
  rgu.`LEVEL`,
  (SELECT u.`NAME` FROM `sys_user` u WHERE u.`USER_ID`=rgu.`USER_ID`) AS NAME,
  (SELECT (select d.`NAME` FROM sys_dictionaries d WHERE d.`ZD_ID` = u.BM) as BM_NAME FROM `sys_user` u WHERE u.`USER_ID`=rgu.`USER_ID`) AS BM_NAME,
  (SELECT s.`STRUCT_NAME` FROM `sys_structinfo` s WHERE s.`STRUCT_ID`=rgu.`STRUCT_ID` ) AS STRUCT_NAME,
  rgu.`STRUCT_ID`,(SELECT t.`FLAG` FROM `tt_review_group_flag` t WHERE t.`STRUCT_ID`=rgu.`STRUCT_ID` AND t.REVIEW_GROUP_ID = rgu.`TT_REVIEW_GROUP`) AS FLAG 
FROM
  `tt_review_group_user` rgu 
WHERE rgu.`TT_REVIEW_GROUP` = #{reviewGroupId} and 
	rgu.`STRUCT_ID` in 
      (SELECT 
        s.`STRUCT_ID` 
      FROM
        `sys_structinfo` s 
      WHERE s.`STRUCTST_AGE` = 1)
  ORDER BY rgu.`STRUCT_ID` 
   </select>
   
   
   
  <select id="findReviewGroupUserListWaiShenGroupUserByCompany" parameterType="pd" resultType="pd">
  SELECT  
  rgu.`USER_ID`,
  rgu.`LEVEL`,
  (SELECT u.`NAME` FROM `sys_user` u WHERE u.`USER_ID`=rgu.`USER_ID`) AS NAME,
  (SELECT (select d.`NAME` FROM sys_dictionaries d WHERE d.`ZD_ID` = u.BM) as BM_NAME FROM `sys_user` u WHERE u.`USER_ID`=rgu.`USER_ID`) AS BM_NAME,
  (SELECT s.`STRUCT_NAME` FROM `sys_structinfo` s WHERE s.`STRUCT_ID`=rgu.`STRUCT_ID` ) AS STRUCT_NAME,
  rgu.`STRUCT_ID`
FROM
  `tt_review_group_user` rgu 
WHERE rgu.`TT_REVIEW_GROUP` = #{reviewGroupId} and 
      rgu.`STRUCT_ID` = 
      (SELECT 
        s.`STRUCT_ID` 
      FROM
        `sys_structinfo` s 
      WHERE s.`STRUCTST_AGE` = 0)
  ORDER BY rgu.`STRUCT_ID` 
   </select>
   
  <select id="findReviewGroupUserListWaiShenCompanyUserByCompany" parameterType="pd" resultType="pd">
  SELECT  
  rgu.`USER_ID`,
  rgu.`LEVEL`,
  (SELECT u.`NAME` FROM `sys_user` u WHERE u.`USER_ID`=rgu.`USER_ID`) AS NAME,
  (SELECT (select d.`NAME` FROM sys_dictionaries d WHERE d.`ZD_ID` = u.BM) as BM_NAME FROM `sys_user` u WHERE u.`USER_ID`=rgu.`USER_ID`) AS BM_NAME,
  (SELECT s.`STRUCT_NAME` FROM `sys_structinfo` s WHERE s.`STRUCT_ID`=rgu.`STRUCT_ID` ) AS STRUCT_NAME,
  rgu.`STRUCT_ID`
FROM
  `tt_review_group_user` rgu 
WHERE rgu.`TT_REVIEW_GROUP` = #{reviewGroupId} and 
      rgu.`STRUCT_ID` = #{STRUCT_ID}
  ORDER BY rgu.`STRUCT_ID` 
   </select>
   
   
   <!--查询 审批人 最小层次的审批人-->
   <select id="findReviewGroupbyMinLeveLUserlist" parameterType="pd" resultType="pd">
   SELECT 
  rgu.`USER_ID`,
  rgu.`LEVEL`,
  (SELECT 
    u.`NAME` 
  FROM
    `sys_user` u 
  WHERE u.`USER_ID` = rgu.`USER_ID`) AS NAME 
FROM
  `tt_review_group_user` rgu 
WHERE rgu.`TT_REVIEW_GROUP` = #{reviewGroupId} 
  AND rgu.`LEVEL` = 
  (SELECT 
    MIN(t.`LEVEL`) 
  FROM
    `tt_review_group_user` t 
  WHERE t.`TT_REVIEW_GROUP` = #{reviewGroupId}
  AND
	(
      t.`STRUCT_ID` = #{STRUCT_ID}
      OR t.`STRUCT_ID` = 
      (SELECT 
        s.`STRUCT_ID` 
      FROM
        `sys_structinfo` s 
      WHERE s.`STRUCTST_AGE` = 0)
    )
  )
  AND
	(
      rgu.`STRUCT_ID` = #{STRUCT_ID}
      OR rgu.`STRUCT_ID` = 
      (SELECT 
        s.`STRUCT_ID` 
      FROM
        `sys_structinfo` s 
      WHERE s.`STRUCTST_AGE` = 0)
    )
     </select>
     
     
        <!--查询  未审批的最小层次的审批人-->
   <select id="findTribunebyMinLeveLUserlist" parameterType="pd" resultType="pd">
  SELECT t.`USER_ID`,t.`LEVEL` FROM `tt_tribune_user` t  WHERE t.`TRIBUNE_ID`=#{tribuneId} AND t.`STATE`=0  AND t.`LEVEL`=(
  SELECT MIN(t.`LEVEL`) FROM `tt_tribune_user` t  WHERE t.`TRIBUNE_ID`=#{tribuneId} AND t.`STATE`=0)
     </select>
   
    <select id="findReviewGroupByUserQuyu" parameterType="pd" resultType="pd">

SELECT 
  ts.USER_ID,
  ts.USERNAME,
  ts.PASSWORD,
  ts.LAST_LOGIN,
  ts.STRUCT_ID,
  ts.NAME,
  ts.IP,
  ts.IDENTITYCODE,
  ts.EMAIL,
  (SELECT 
    GROUP_CONCAT(REVIEW_GROUP_NAME) 
  FROM
    `tt_review_group` g 
  WHERE g.`REVIEW_GROUP_ID` IN 
    (SELECT 
      r.`TT_REVIEW_GROUP` 
    FROM
      tt_review_group_user r 
    WHERE r.`USER_ID` = ts.USER_ID)) AS GROUP_NAME,
    
    (SELECT 
    GROUP_CONCAT(REVIEW_GROUP_ID) 
  FROM
    `tt_review_group` g 
  WHERE g.`REVIEW_GROUP_ID` IN 
    (SELECT 
      r.`TT_REVIEW_GROUP` 
    FROM
      tt_review_group_user r 
    WHERE r.`USER_ID` = ts.USER_ID)) AS GROUP_ID,  
  (SELECT 
    ss.`STRUCT_NAME` 
  FROM
    sys_structinfo ss 
  WHERE ss.`STRUCT_ID` = ts.STRUCT_ID) AS STRUCT_NAME,
  ts.NUMBER,
  ts.PHONE,
  ts.BM,
  (SELECT 
    d.`NAME` 
  FROM
    sys_dictionaries d 
  WHERE d.`ZD_ID` = ts.BM) AS BM_NAME 
FROM
  `sys_user` ts 
WHERE ts.`USER_ID` IN 
  (SELECT 
    r.`USER_ID` 
  FROM
    `tt_review_group_user` r 
  WHERE
    (
      r.`STRUCT_ID` = #{STRUCT_ID} 
      OR r.`STRUCT_ID` = 
      (SELECT 
        s.`STRUCT_ID` 
      FROM
        `sys_structinfo` s 
      WHERE s.`STRUCTST_AGE` = 0)
    ))
    
    
   
			    

  </select>
  
     <!-- 通过组名获取数据 -->
	<select id="hasGroupName" parameterType="pd" resultType="pd" useCache="false">
		select 
			 <include refid="Base_Column_List" />
		from 
			tt_review_group
		where 
			
			REVIEW_GROUP_NAME = #{reviewGroupName} 
			and STRUCT_ID=#{STRUCT_ID}
		<if test="reviewGroupId != null and reviewGroupId != ''">
			and REVIEW_GROUP_ID != #{reviewGroupId} 
		</if>
	</select>
  
  
  <insert id="insertSelective" parameterType="com.ssc.entity.system.TtReviewGroup" >
    insert into tt_review_group
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="reviewGroupId != null" >
        REVIEW_GROUP_ID,
      </if>
      <if test="reviewGroupName != null" >
        REVIEW_GROUP_NAME,
      </if>
   
   		 <if test="type != null" >
        TYPE,
      </if>
      <if test="createDate != null" >
        CREATE_DATE,
      </if>
      <if test="createBy != null" >
        CREATE_BY,
      </if>
      <if test="updateDate != null" >
        UPDATE_DATE,
      </if>
      <if test="updateBy != null" >
        UPDATE_BY,
      </if>
      
      <if test="structId != null" >
        STRUCT_ID,
      </if>
      <if test="groupRemark != null" >
        GROUP_REMARK,
      </if>
      <if test="isDel != null" >
        IS_DEL,
      </if>
      <if test="groupNo != null" >
        GROUP_NO,
      </if>
      <if test="isConfirm != null" >
        IS_CONFIRM,
      </if>
       <if test="level != null" >
        LEVEL,
      </if>
      
      
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="reviewGroupId != null" >
        #{reviewGroupId,jdbcType=VARCHAR},
      </if>
      <if test="reviewGroupName != null" >
        #{reviewGroupName,jdbcType=VARCHAR},
      </if>
    
   	  <if test="type != null" >
         #{type},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null" >
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null" >
        #{updateBy,jdbcType=VARCHAR},
      </if>
      
      
        <if test="structId != null" >
        #{structId,jdbcType=VARCHAR},
      </if>
      <if test="groupRemark != null" >
        #{groupRemark,jdbcType=VARCHAR},
      </if>
      <if test="isDel != null" >
         #{isDel},
      </if>
      <if test="groupNo != null" >
       #{groupNo,jdbcType=VARCHAR},
      </if>
      <if test="isConfirm != null" >
        #{isConfirm},
      </if>
        <if test="level != null" >
        #{level},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ssc.entity.system.TtReviewGroup" >
    update tt_review_group
    <set >
      <if test="reviewGroupName != null" >
        REVIEW_GROUP_NAME = #{reviewGroupName,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      </if>
       <if test="type != null" >
        TYPE = #{type},
      </if>
      <if test="createBy != null" >
        CREATE_BY = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateDate != null" >
        UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null" >
        UPDATE_BY = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        LEVEL = #{level},
      </if>
      
            
        <if test="structId != null" >
       STRUCT_ID= #{structId,jdbcType=VARCHAR},
      </if>
      <if test="groupRemark != null" >
       GROUP_REMARK= #{groupRemark,jdbcType=VARCHAR},
      </if>
      <if test="isDel != null" >
        IS_DEL= #{isDel},
      </if>
      <if test="groupNo != null" >
      GROUP_NO= #{groupNo,jdbcType=VARCHAR},
      </if>
      <if test="isConfirm != null" >
       IS_CONFIRM= #{isConfirm},
      </if>
          
    </set>
    where REVIEW_GROUP_ID = #{reviewGroupId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ssc.entity.system.TtReviewGroup" >
    update tt_review_group
    set REVIEW_GROUP_NAME = #{reviewGroupName,jdbcType=VARCHAR},
      TYPE = #{type,jdbcType=VARCHAR},
      CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      CREATE_BY = #{createBy,jdbcType=VARCHAR},
      UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
      UPDATE_BY = #{updateBy,jdbcType=VARCHAR}
    where REVIEW_GROUP_ID = #{reviewGroupId,jdbcType=VARCHAR}
  </update>
  
  
   
  <select id="listAllGroup" parameterType="page" resultMap="BaseResultMap"  useCache="false">
  SELECT t.`REVIEW_GROUP_ID`,
	t.`REVIEW_GROUP_NAME`,
	(SELECT 
        NAME 
      FROM
        sys_user s 
      WHERE s.`USER_ID` = t.CREATE_BY) AS CREATE_BY,
	t.`CREATE_DATE`
 FROM `tt_review_group` t
 where t.IS_CONFIRM=1  AND t.`IS_DEL`=0
 and 
 t.`REVIEW_GROUP_ID` NOT IN (SELECT rgf.`REVIEW_GROUP_ID` FROM `tt_review_group_flag` rgf WHERE  rgf.`STRUCT_ID`=#{pd.STRUCT_ID} AND rgf.`FLAG`=0)
 
 <if test="pd.reviewGroupType != null and pd.reviewGroupType != ''">
   AND 
  CASE
    WHEN 
    (SELECT 
      COUNT(*) 
    FROM
      `tt_review_group` te 
    WHERE te.IS_CONFIRM = 1 
      AND te.TYPE = #{pd.reviewGroupType}
      AND (
        (te.`STRUCT_ID` = #{pd.STRUCT_ID} 
          AND te.LEVEL = 0) 
        OR (
          te.`STRUCT_ID` = 
          (SELECT 
            s.`STRUCT_ID` 
          FROM
            `sys_structinfo` s 
          WHERE s.`STRUCTST_AGE` = 0) 
          AND te.`LEVEL` = 1
        )
      )) > 0 
    THEN (
      t.TYPE = #{pd.reviewGroupType}
      AND (
        (t.`STRUCT_ID` = #{pd.STRUCT_ID}
          AND t.LEVEL = 0) 
        OR (
          t.`STRUCT_ID` = 
          (SELECT 
            s.`STRUCT_ID` 
          FROM
            `sys_structinfo` s 
          WHERE s.`STRUCTST_AGE` = 0) 
          AND t.LEVEL = 1
        )
      )
    )
    ELSE 
    1=1 
  END 
  
  </if>
 <if test="pd.NAME != null and pd.NAME != ''"><!-- 关键词检索 -->
		and	(REVIEW_GROUP_NAME LIKE #{pd.NAME2})
		</if>
		  
ORDER BY  CREATE_DATE DESC
  </select>
  
  <!-- 评审设置主页查询 -->
  <select id="listPageAllGroupTwo" parameterType="page" resultMap="BaseResultMap"  useCache="false">
  SELECT t.`REVIEW_GROUP_ID`,
	t.`REVIEW_GROUP_NAME`,
	(SELECT 
        NAME 
      FROM
        sys_user s 
      WHERE s.`USER_ID` = t.CREATE_BY) AS CREATE_BY,
	t.`CREATE_DATE`,STRUCT_ID,GROUP_REMARK,IS_DEL,GROUP_NO,IS_CONFIRM,TYPE,(SELECT s.`STRUCT_NAME` FROM `sys_structinfo` s WHERE s.`STRUCT_ID`=t.`STRUCT_ID` ) AS STRUCT_NAME
 FROM `tt_review_group` t
 where	
 CASE
    (SELECT 
      s.`STRUCTST_AGE` 
    FROM
      `sys_structinfo` s 
    WHERE s.`STRUCT_ID` = #{pd.STRUCT_ID} ) 
    WHEN 0 
    THEN 1 = 1 
    WHEN 1 
    THEN t.`STRUCT_ID` = #{pd.STRUCT_ID} 
  END 
 <if test="pd.NAME != null and pd.NAME != ''"><!-- 关键词检索 -->
	and 	(REVIEW_GROUP_NAME LIKE #{pd.NAME2})
		</if>
ORDER BY  CREATE_DATE DESC
  </select>
  
    <!-- 评审设置主页查询 -->
  <select id="listPageAllGroupThree" parameterType="page" resultMap="BaseResultMap"  useCache="false">
 SELECT t.`REVIEW_GROUP_ID`,
	t.`REVIEW_GROUP_NAME`,
	(SELECT 
        NAME 
      FROM
        sys_user s 
      WHERE s.`USER_ID` = t.CREATE_BY) AS CREATE_BY,
	t.`CREATE_DATE`,STRUCT_ID,GROUP_REMARK,IS_DEL,GROUP_NO,IS_CONFIRM,
	(select tt.type_name from 
	(SELECT type_id , type_name FROM `tt_review_group_type`
UNION SELECT bianma  AS type_id,NAME AS type_name  FROM `sys_dictionaries` WHERE P_BM LIKE  CONCAT('SPLX','_%')  ORDER BY type_id ) tt where tt.type_id = t.type ) as TYPE,
	(SELECT s.`STRUCT_NAME` FROM `sys_structinfo` s WHERE s.`STRUCT_ID`=t.`STRUCT_ID` ) AS STRUCT_NAME ,CASE LEVEL WHEN 0 THEN '内审' WHEN '1' THEN '外审' END AS cLEVEL,t.LEVEL
  FROM `tt_review_group` t
  WHERE (LEVEL='1' OR (LEVEL='0' AND t.`STRUCT_ID` = #{pd.STRUCT_ID}))
  
  
 <if test="pd.NAME != null and pd.NAME != ''"><!-- 关键词检索 -->
	AND 	(REVIEW_GROUP_NAME LIKE #{pd.NAME2})
</if>
ORDER BY  CREATE_DATE DESC
  </select>
 
  
  <!-- 更改type为空 -->
   <delete id="changeType" parameterType="pd" >
    UPDATE `tt_review_group` SET TYPE='' WHERE TYPE=#{type,jdbcType=VARCHAR}
  </delete>
 
  <select id="selectAllUser"  resultType="pd" parameterType="pd">
  SELECT u.`STRUCT_ID`,u.`USER_ID`,u.`NAME`,(SELECT i.STRUCT_NAME FROM `sys_structinfo` i 
  WHERE i.STRUCT_ID=U.`STRUCT_ID`  )AS GSNAME FROM `sys_user` u
  
  </select>
  
  
  <select id="selectUserId"  parameterType="pd" resultType="java.lang.String">
  SELECT GROUP_CONCAT( u.`USER_ID`)FROM `sys_user` u
  </select>
  
  
  
  <select id="selectCCId"  parameterType="pd" resultType="java.lang.String">
  SELECT GROUP_CONCAT(t.`USER_ID`) FROM `tt_review_group_user` t WHERE  t.`TT_REVIEW_GROUP`=#{reviewGroupId,jdbcType=VARCHAR}
  </select>
  
   <!-- 编辑 -->
  <select id="selectGroup"  resultType="pd" parameterType="pd" >
  SELECT 
  t.`REVIEW_GROUP_ID`,
  t.`REVIEW_GROUP_NAME`,
  t.`CREATE_BY`,
  t.`CREATE_DATE`,
  t.TYPE,
  t.LEVEL,
  t.STRUCT_ID,
  (SELECT GROUP_CONCAT(
    i.`NAME` )
  FROM
    `sys_user` i 
  WHERE i.`USER_ID`IN  
    (SELECT 
      s.USER_ID 
    FROM
      `tt_review_group_user` s 
    WHERE s.TT_REVIEW_GROUP = t.`REVIEW_GROUP_ID`)) AS NAME
FROM
  `tt_review_group` t 
WHERE REVIEW_GROUP_ID = #{reviewGroupId,jdbcType=VARCHAR}
  </select>
  
  
  
  <!-- 删除 -->
	  <delete id="deleteGroup" parameterType="pd" >
  		 delete from tt_review_group   where REVIEW_GROUP_ID = #{reviewGroupId,jdbcType=VARCHAR}
	  </delete>
	  
	  <!-- 删除User -->
	  <delete id="deleteGroupUser" parameterType="pd" >
  		 delete from tt_review_group_user   where TT_REVIEW_GROUP = #{reviewGroupId,jdbcType=VARCHAR}
	  </delete>
	  
	   <!-- 批量删除 -->
	<delete id="deleteAllGroup" parameterType="String" flushCache="false">
		delete from tt_review_group
		 where REVIEW_GROUP_ID in 
  			 <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
                  #{item}
             </foreach>
	</delete>
	
	
	<!-- 批量删除User -->
	<delete id="deleteAllGroupUser" parameterType="String" flushCache="false">
		delete from tt_review_group_user
		 where TT_REVIEW_GROUP in 
  			 <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
                  #{item}
             </foreach>
	</delete>
</mapper>