<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="TtCheckUserMapper" >
  <resultMap id="BaseResultMap" type="com.ssc.entity.system.TtCheckUser" >
    <id column="CHECK_USER_ID" property="checkUserId" jdbcType="VARCHAR" />
    <result column="USER_ID" property="userId" jdbcType="VARCHAR" />
    <result column="SECURITY_QUALITY_ID" property="securityQualityId" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    CHECK_USER_ID, USER_ID, SECURITY_QUALITY_ID
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from tt_check_user
    where CHECK_USER_ID = #{checkUserId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from tt_check_user
    where CHECK_USER_ID = #{checkUserId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.ssc.entity.system.TtCheckUser" >
    insert into tt_check_user (CHECK_USER_ID, USER_ID, SECURITY_QUALITY_ID
      )
    values (#{checkUserId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{securityQualityId,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ssc.entity.system.TtCheckUser" >
    insert into tt_check_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="checkUserId != null" >
        CHECK_USER_ID,
      </if>
      <if test="userId != null" >
        USER_ID,
      </if>
      <if test="securityQualityId != null" >
        SECURITY_QUALITY_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="checkUserId != null" >
        #{checkUserId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="securityQualityId != null" >
        #{securityQualityId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ssc.entity.system.TtCheckUser" >
    update tt_check_user
    <set >
      <if test="userId != null" >
        USER_ID = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="securityQualityId != null" >
        SECURITY_QUALITY_ID = #{securityQualityId,jdbcType=VARCHAR},
      </if>
    </set>
    where CHECK_USER_ID = #{checkUserId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ssc.entity.system.TtCheckUser" >
    update tt_check_user
    set USER_ID = #{userId,jdbcType=VARCHAR},
      SECURITY_QUALITY_ID = #{securityQualityId,jdbcType=VARCHAR}
    where CHECK_USER_ID = #{checkUserId,jdbcType=VARCHAR}
  </update>
  
  <!-- 删除人员  q	-->
   <delete id="deleteAllByid" parameterType="pd" >
    DELETE FROM `tt_check_user`  WHERE SECURITY_QUALITY_ID =#{taskQualityId,jdbcType=VARCHAR}
  </delete>
  
  <!-- 删除人员  s	-->
   <delete id="deleteAllByids" parameterType="pd" >
    DELETE FROM `tt_check_user`  WHERE SECURITY_QUALITY_ID =#{taskSecurityId,jdbcType=VARCHAR}
  </delete>
  
  <!-- zhijian anjian -->
  <select id="findUserByIdNotInForTask" parameterType="pd" resultType="pd">
  	SELECT 
			  ts.USER_ID,
			  ts.USERNAME,
			  ts.PASSWORD,
			  ts.LAST_LOGIN,
			  ts.STRUCT_ID,
			  ts.NAME,
			  ts.IP,
			  ts.IDENTITYCODE,
			  ts.EMAIL,
			  (SELECT 
			    GROUP_CONCAT(REVIEW_GROUP_NAME) 
			  FROM
			    `tt_review_group` g 
			  WHERE g.`REVIEW_GROUP_ID` IN 
			    (SELECT 
			      r.`TT_REVIEW_GROUP` 
			    FROM
			      tt_review_group_user r 
			    WHERE r.`USER_ID` = ts.USER_ID)) AS GROUP_NAME,
			    (SELECT 
    GROUP_CONCAT(REVIEW_GROUP_ID) 
  FROM
    `tt_review_group` g 
  WHERE g.`REVIEW_GROUP_ID` IN 
    (SELECT 
      r.`TT_REVIEW_GROUP` 
    FROM
      tt_review_group_user r 
    WHERE r.`USER_ID` = ts.USER_ID)) AS GROUP_ID,
			  (SELECT 
			    ss.`STRUCT_NAME` 
			  FROM
			    sys_structinfo ss 
			  WHERE ss.`STRUCT_ID` = ts.STRUCT_ID) AS STRUCT_NAME,
			  ts.NUMBER,
			  ts.PHONE,
			  ts.BM,
			  (SELECT 
			    d.`NAME` 
			  FROM
			    sys_dictionaries d 
			  WHERE d.`ZD_ID` = ts.BM) AS BM_NAME 
			FROM
			  `sys_user` ts 
			 
			  
			WHERE ts.`USERNAME` IS NOT NULL 
			
			  AND ts.`PASSWORD` IS NOT NULL 
			  AND (ts.`USER_ID` IN 
			  (SELECT 
			    t.`USER_ID` 
			  FROM
			    `tt_item_person` t 
			  WHERE t.`STRUCT_ID` =(SELECT k.`STRUCT_ID` FROM `tt_iteminfo` k WHERE k.`ITEM_ID`=#{itemId}) 
			    ) 
			 )
			  AND ts.`USER_ID` NOT IN 
			(SELECT 
				t.`USER_ID` 
				FROM
				`tt_check_user` t 
			WHERE t.`SECURITY_QUALITY_ID` = #{securityQualityId})
  </select>
  
  
  <select id="findUserByIdNotIn" parameterType="pd" resultType="pd">
SELECT 
  ts.USER_ID,
  ts.USERNAME,
  ts.PASSWORD,
  ts.LAST_LOGIN,
  ts.STRUCT_ID,
  ts.NAME,
  (SELECT 
    GROUP_CONCAT(REVIEW_GROUP_NAME) 
  FROM
    `tt_review_group` g 
  WHERE g.`REVIEW_GROUP_ID` IN 
    (SELECT 
      r.`TT_REVIEW_GROUP` 
    FROM
      tt_review_group_user r 
    WHERE r.`USER_ID` = ts.USER_ID)) AS GROUP_NAME,
    (SELECT 
    GROUP_CONCAT(REVIEW_GROUP_ID) 
  FROM
    `tt_review_group` g 
  WHERE g.`REVIEW_GROUP_ID` IN 
    (SELECT 
      r.`TT_REVIEW_GROUP` 
    FROM
      tt_review_group_user r 
    WHERE r.`USER_ID` = ts.USER_ID)) AS GROUP_ID,
  (SELECT 
    ss.`STRUCT_NAME` 
  FROM
    sys_structinfo ss 
  WHERE ss.`STRUCT_ID` = ts.STRUCT_ID) AS STRUCT_NAME,
  ts.NUMBER,
  ts.PHONE,
  ts.BM,
  (SELECT 
    d.`NAME` 
  FROM
    sys_dictionaries d 
  WHERE d.`ZD_ID` = ts.BM) AS BM_NAME 
FROM
  `sys_user` ts 
WHERE ts.`USERNAME` IS NOT NULL 
  AND ts.`PASSWORD` IS NOT NULL 
  AND ts.`USER_ID` NOT IN 
  (SELECT 
    t.`USER_ID` 
  FROM
    `tt_check_user` t 
  WHERE t.SECURITY_QUALITY_ID = #{securityQualityId}) 
  AND ts.`STRUCT_ID` IN 
  (SELECT 
    t.`STRUCT_ID` 
  FROM
    `tt_item_struct` t 
  WHERE t.`STRUCT_ID` = #{STRUCT_ID} 
    OR t.`CURRENT_STRUCT_ID` = #{STRUCT_ID}) 
  OR ts.`STRUCT_ID` IN 
  (SELECT 
    t.`CURRENT_STRUCT_ID` 
  FROM
    `tt_item_struct` t 
  WHERE t.`STRUCT_ID` = #{STRUCT_ID} 
    OR t.`CURRENT_STRUCT_ID` = #{STRUCT_ID}) 
  AND ts.`USER_ID` NOT IN 
  (SELECT 
    t.`USER_ID` 
  FROM
    `tt_check_user` t 
  WHERE t.`SECURITY_QUALITY_ID` = #{securityQualityId})
  </select>
  
   <!-- 根据主键Id查询已选择的人员 -->
   <select id="findUserById" parameterType="pd" resultType="pd">
    SELECT 
    u.`USER_ID`,
  u.`NAME`,
  (SELECT 
    i.STRUCT_NAME 
  FROM
    `sys_structinfo` i 
  WHERE i.STRUCT_ID = u.`STRUCT_ID`) AS STRUCT_NAME,
  (SELECT 
    GROUP_CONCAT(REVIEW_GROUP_NAME) 
  FROM
    `tt_review_group` o 
  WHERE o.STRUCT_ID = u.`STRUCT_ID`) AS GROUP_NAME 
FROM
  `tt_check_user` t,
  `sys_user` u 
WHERE t.`SECURITY_QUALITY_ID` =  #{securityQualityId}
  AND t.`USER_ID` = u.`USER_ID`  
   </select>
</mapper>