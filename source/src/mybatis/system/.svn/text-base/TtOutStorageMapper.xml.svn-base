<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="TtOutStorageMapper" >
  <resultMap id="BaseResultMap" type="com.ssc.entity.system.TtOutStorage" >
    <result column="OUT_STORAGE_ID" property="outStorageId" jdbcType="VARCHAR" />
    <result column="ITEM_STORAGE_ID" property="itemStorageId" jdbcType="VARCHAR" />
    <result column="OUT_STORAGE_NO" property="outStorageNo" jdbcType="VARCHAR" />
    <result column="OUT_STORAGE_OBJ" property="outStorageObj" jdbcType="VARCHAR" />
    <result column="OUT_OBJ_MARK" property="outObjMark" jdbcType="INTEGER" />
    <result column="RECEIVE_USER" property="receiveUser" jdbcType="VARCHAR" />
     <result column="CONFIRM_USER" property="confirmUser" jdbcType="VARCHAR" />
    <result column="PRICE" property="price" jdbcType="DECIMAL" />
    <result column="NUM" property="num" jdbcType="DECIMAL" />
    <result column="AMOUNT" property="amount" jdbcType="DECIMAL" />
    <result column="CONFIRM_STATE" property="confirmState" jdbcType="INTEGER" />
    <result column="IS_DEL" property="isDel" jdbcType="INTEGER" />
    <result column="CREATE_DATE" property="createDate" jdbcType="TIMESTAMP" />
    <result column="CREATE_BY" property="createBy" jdbcType="VARCHAR" />
    <result column="UPDATE_DATE" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="UPDATE_BY" property="updateBy" jdbcType="VARCHAR" />
    <result column="outStorageObjName" property="outStorageObjName" jdbcType="VARCHAR" />
    <result column="REMARK" property="remark" jdbcType="VARCHAR" />
  </resultMap>
  
<select id="taskListByItemId" parameterType="pd" resultType="pd">
SELECT 
  t.UID,NAME,
  (SELECT 
    PRICE 
  FROM
    tt_out_task ta 
  WHERE ta.OUT_STORAGE_OBJ = t.`UID` and ta.OUT_STORAGE_ID=#{outStorageId,jdbcType=VARCHAR}) PRICE,
  (SELECT 
    NUM 
  FROM
    tt_out_task ta 
  WHERE ta.OUT_STORAGE_OBJ = t.`UID` and ta.OUT_STORAGE_ID=#{outStorageId,jdbcType=VARCHAR}) NUM,
  (SELECT 
    AMOUNT 
  FROM
    tt_out_task ta 
  WHERE ta.OUT_STORAGE_OBJ = t.`UID` and ta.OUT_STORAGE_ID=#{outStorageId,jdbcType=VARCHAR}) AMOUNT,
  CASE 
  WHEN(t.UID IN (SELECT ta.OUT_STORAGE_OBJ FROM tt_out_task ta WHERE ta.OUT_STORAGE_ID = #{outStorageId,jdbcType=VARCHAR} ))
  THEN 'yes'
  ELSE 'no'
  END  
  checked,
  (SELECT 
  SUM(QUOTA_UNIT_CONSUMPTION) 
FROM
  tt_task_quota_detail 
WHERE TASK_COST_QUOTA_ID IN 
  (SELECT 
    t.`TASK_COST_QUOTA_ID` 
  FROM
    tt_task_cost_quota t 
  WHERE t.`TASK_ID` = t.UID 
    AND t.approval_state = 1) 
  AND QUOTA_NAME = (SELECT 
    NAME 
  FROM
    `tt_item_storage` 
  WHERE ITEM_STORAGE_ID = #{itemStorageId,jdbcType=VARCHAR}) 
  AND `QUOTA_SPECIFICATION` = (SELECT 
    SPECIFICATION 
  FROM
    `tt_item_storage` 
  WHERE ITEM_STORAGE_ID = #{itemStorageId,jdbcType=VARCHAR})
  AND `QUOTA_UNIT` = (SELECT 
    UNIT 
  FROM
    `tt_item_storage` 
  WHERE ITEM_STORAGE_ID = #{itemStorageId,jdbcType=VARCHAR})
) COUNT_NUM,
IFNULL((SELECT   tot.`CONFIRM_STATE` FROM  tt_out_task tot WHERE tot.`OUT_STORAGE_OBJ` = t.UID   AND tot.`OUT_STORAGE_ID` = #{outStorageId,jdbcType=VARCHAR} ),0)
STATE
FROM
  tt_taskinfo t 
WHERE t.`PROJECTUID` =  #{ITEM_ID,jdbcType=VARCHAR}
</select>
  
  <insert id="insertSelective" parameterType="pd" >
    insert into tt_out_storage
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="outStorageId != null" >
        OUT_STORAGE_ID,
      </if>
      <if test="itemStorageId != null" >
        ITEM_STORAGE_ID,
      </if>
      <if test="outStorageNo != null" >
        OUT_STORAGE_NO,
      </if>
      <if test="outStorageObj != null" >
        OUT_STORAGE_OBJ,
      </if>
      <if test="outObjMark != null" >
        OUT_OBJ_MARK,
      </if>
      <if test="receiveUser != null" >
        RECEIVE_USER,
      </if>
      <if test="price != null" >
        PRICE,
      </if>
      <if test="num != null" >
        NUM,
      </if>
      <if test="amount != null" >
        AMOUNT,
      </if>
      <if test="confirmState != null" >
        CONFIRM_STATE,
      </if>
      <if test="isDel != null" >
        IS_DEL,
      </if>
      <if test="createDate != null" >
        CREATE_DATE,
      </if>
      <if test="createBy != null" >
        CREATE_BY,
      </if>
      <if test="updateDate != null" >
        UPDATE_DATE,
      </if>
      <if test="updateBy != null" >
        UPDATE_BY,
      </if>
      <if test="remark != null" >
        REMARK,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="outStorageId != null" >
        #{outStorageId,jdbcType=VARCHAR},
      </if>
      <if test="itemStorageId != null" >
        #{itemStorageId,jdbcType=VARCHAR},
      </if>
      <if test="outStorageNo != null" >
        #{outStorageNo,jdbcType=VARCHAR},
      </if>
      <if test="outStorageObj != null" >
        #{outStorageObj,jdbcType=VARCHAR},
      </if>
      <if test="outObjMark != null" >
        #{outObjMark,jdbcType=INTEGER},
      </if>
      <if test="receiveUser != null" >
        #{receiveUser,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="num != null" >
        #{num,jdbcType=DECIMAL},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="confirmState != null" >
        #{confirmState,jdbcType=INTEGER},
      </if>
      <if test="isDel != null" >
        #{isDel,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null" >
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null" >
        #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <!-- 查询所有主键  sf-->
  <select id="listAll" resultType="pd" >
  SELECT  os.`OUT_STORAGE_ID`
FROM tt_out_storage os
  </select>
  
<update id="updateOutStorageConfirm" parameterType="pd">
  	update tt_out_storage set CONFIRM_USER=#{confirmUser},CONFIRM_STATE=#{confirmState}  where OUT_STORAGE_ID=#{outStorageId}
</update>
<update id="upOutTaskConfirmUser" parameterType="pd">
  update tt_out_task set CONFIRM_USER=#{confirmUser},CONFIRM_STATE=#{confirmState}  
  where OUT_STORAGE_ID=#{outStorageId} and OUT_STORAGE_OBJ=#{TASK_ID}
</update>
  
<select id="listPageOutStorageByItemId" resultType="pd" parameterType="page">
SELECT 
  OUT_STORAGE_ID,
  ITEM_STORAGE_ID,
  OUT_STORAGE_NO,
  CASE o.OUT_OBJ_MARK
    WHEN 1
    THEN (SELECT GROUP_CONCAT(tt.NAME) FROM tt_out_task ta,tt_taskinfo tt WHERE tt.UID=ta.OUT_STORAGE_OBJ AND  ta.OUT_STORAGE_ID=o.OUT_STORAGE_ID AND ta.OUT_STORAGE_MARK=1)
    ELSE (SELECT tp.PACT_NAME FROM tt_pactinfo tp WHERE tp.PACT_ID=o.OUT_STORAGE_OBJ)
  END AS outStorageObjName,
  REMARK,
  OUT_STORAGE_OBJ,
  OUT_OBJ_MARK,
  RECEIVE_USER,
  (SELECT 
    t.UNIT 
  FROM
    `tt_item_storage` t 
  WHERE t.ITEM_STORAGE_ID = o.ITEM_STORAGE_ID) AS UNIT,
  (SELECT 
    SUM(PRICE) 
  FROM
    tt_out_task ta 
  WHERE ta.OUT_STORAGE_ID = o.OUT_STORAGE_ID) PRICE,
  (SELECT 
    SUM(NUM) 
  FROM
    tt_out_task ta 
  WHERE ta.OUT_STORAGE_ID = o.OUT_STORAGE_ID) NUM,
  (SELECT 
    SUM(AMOUNT) 
  FROM
    tt_out_task ta 
  WHERE ta.OUT_STORAGE_ID = o.OUT_STORAGE_ID) AMOUNT,
  (SELECT 
    s.`NAME` 
  FROM
    `sys_user` s 
  WHERE s.`USER_ID` = o.CONFIRM_USER) AS CONFIRM_USER,
  CONFIRM_STATE,
  IS_DEL,
  CREATE_DATE,
  (SELECT 
    s.`NAME` 
  FROM
    `sys_user` s 
  WHERE s.`USER_ID` = o.CREATE_BY) AS CREATE_BY,
  UPDATE_DATE,
  UPDATE_BY 
FROM
  tt_out_storage o 
where ITEM_STORAGE_ID = #{pd.itemStorageId,jdbcType=VARCHAR}
<if test="pd.NAME != null and pd.NAME != ''"><!-- 关键词检索 -->
	and
		(
			 OUT_STORAGE_NO LIKE CONCAT(CONCAT('%', #{pd.NAME}),'%')
			 or 
			 RECEIVE_USER LIKE CONCAT(CONCAT('%', #{pd.NAME}),'%') 
		)
</if>
    
     <if test="pd.LASTLOGINSTART1 !=null and pd.LASTLOGINSTART1 != '' ">
 		<if test="pd.LASTLOGINSTART2 !=null and pd.LASTLOGINSTART2 != '' ">
 		AND CREATE_DATE  &gt;=#{pd.LASTLOGINSTART1} AND CREATE_DATE &lt;=#{pd.LASTLOGINSTART2} 
 		</if>
</if>
</select>
  <!-- 根据仓储id查询库存单价 -->
  <select id="findItemStorage" resultType="pd" parameterType="pd">
	  SELECT 
	IFNULL(FORMAT((( SELECT (( SELECT IFNULL(SUM(i.`AMOUNT`),0) FROM `tt_in_storage` i  WHERE i.`ITEM_STORAGE_ID`=#{itemStorageId})
	 -
	 (SELECT IFNULL(SUM(o.`AMOUNT`),0) FROM `tt_out_storage` o  WHERE o.`ITEM_STORAGE_ID`=#{itemStorageId})))/
	 ( SELECT (( SELECT IFNULL(SUM(i.NUM),0) FROM `tt_in_storage` i  WHERE i.`ITEM_STORAGE_ID`=#{itemStorageId})
	 -
	 (SELECT IFNULL(SUM(o.NUM),0) FROM `tt_out_storage` o  WHERE o.`ITEM_STORAGE_ID`=#{itemStorageId})))),2),0)  AS kucunPrice
  </select>
<select id="findOutStorageByOutid" resultType="pd" parameterType="pd">
SELECT 
  OUT_STORAGE_ID,
  ITEM_STORAGE_ID,
  OUT_STORAGE_NO,
  CASE
    WHEN 
    (SELECT 
      t.`NAME` 
    FROM
      `tt_taskinfo` t 
    WHERE t.`UID` = o.OUT_STORAGE_OBJ) IS NULL 
    THEN 
    (SELECT 
      p.`PACT_NAME` 
    FROM
      `tt_pactinfo` p 
    WHERE p.`PACT_ID` = o.OUT_STORAGE_OBJ) 
    WHEN 
    (SELECT 
      p.`PACT_NAME` 
    FROM
      `tt_pactinfo` p 
    WHERE p.`PACT_ID` = o.OUT_STORAGE_OBJ) IS NULL 
    THEN 
    (SELECT 
      t.`NAME` 
    FROM
      `tt_taskinfo` t 
    WHERE t.`UID` = o.OUT_STORAGE_OBJ) 
  END AS outStorageObjName,
  REMARK,
  OUT_STORAGE_OBJ,
  OUT_OBJ_MARK,
  RECEIVE_USER,
  PRICE,
  (SELECT 
    SUM(ta.NUM) 
  FROM
    tt_out_task ta 
  WHERE ta.OUT_STORAGE_ID IN 
    (SELECT 
      st.OUT_STORAGE_ID 
    FROM
      tt_out_storage st 
    WHERE st.ITEM_STORAGE_ID = o.ITEM_STORAGE_ID)) NUM,
  AMOUNT,
  CONFIRM_USER,
  CONFIRM_STATE,
  IS_DEL,
  CREATE_DATE,
  CREATE_BY,
  UPDATE_DATE,
  UPDATE_BY 
FROM
  tt_out_storage o 
where OUT_STORAGE_ID = #{outStorageId,jdbcType=VARCHAR}
  
</select>
  
<select id="findItemStorageNumOne" resultType="pd" parameterType="pd">
SELECT 
  SUM(ta.NUM) NUM
FROM
  tt_out_task ta 
WHERE ta.OUT_STORAGE_ID IN 
  (SELECT 
    st.OUT_STORAGE_ID 
  FROM
    tt_out_storage st 
  WHERE st.ITEM_STORAGE_ID = #{itemStorageId,jdbcType=VARCHAR})
</select>
  
<select id="findItemStorageNumTwo" resultType="pd" parameterType="pd">
	 	SELECT SUM(t.QUOTA_CONSUMPTION)  as NUM  FROM tt_task_quota_detail t WHERE  
		  t.QUOTA_NAME=(SELECT  NAME FROM `tt_item_storage` WHERE ITEM_STORAGE_ID=#{itemStorageId}) AND
		  t.QUOTA_UNIT=(SELECT  UNIT FROM `tt_item_storage` WHERE ITEM_STORAGE_ID=#{itemStorageId}) AND
		  t.QUOTA_SPECIFICATION=(SELECT  SPECIFICATION FROM `tt_item_storage` WHERE ITEM_STORAGE_ID=#{itemStorageId}) 
 </select>
  
  
  <update id="updateOutStorageByoutid" parameterType="pd">
  	update tt_out_storage set 
  	
		  	OUT_STORAGE_NO=#{outStorageNo},
		  OUT_STORAGE_OBJ=#{outStorageObj},
		  OUT_OBJ_MARK=#{outObjMark},
		  RECEIVE_USER=#{receiveUser},
		  PRICE=#{price},
		  NUM=#{num},
		  AMOUNT=#{amount},
		  UPDATE_DATE=#{updateDate},
		  UPDATE_BY =#{updateBy},
		  REMARK =#{remark}
		  where OUT_STORAGE_ID=#{outStorageId}
  </update>
  <!-- 修改     =====sf -->
   <update id="updateById" parameterType="pd">
  	update tt_out_storage set 
  	CONFIRM_STATE=#{confirmState},
		  CONFIRM_USER=#{confirmUser},
		  UPDATE_DATE=#{updateDate},
		  UPDATE_BY =#{updateBy}
		  where OUT_STORAGE_ID=#{outStorageId}
  </update>
  <!-- 修改     =====sf -->
  
<select id="listPageTaskActualByTaskid" resultType="pd" parameterType="page">
SELECT 
  o.OUT_STORAGE_ID,
  o.ITEM_STORAGE_ID,
  o.OUT_STORAGE_NO,
  taskName (tu.OUT_STORAGE_OBJ) AS OUT_STORAGE_OBJ,
  tu.`OUT_STORAGE_OBJ` AS OBJ_ID,
  o.OUT_OBJ_MARK,
  o.RECEIVE_USER,
  tu.PRICE AS outPrice,
  tu.NUM AS outNum,
  tu.AMOUNT AS outAmout,
  tu.CONFIRM_STATE,
  (SELECT 
    s.`NAME` 
  FROM
    `sys_user` s 
  WHERE s.`USER_ID` = tu.CONFIRM_USER) AS CONFIRM_USER,
  o.CREATE_DATE,
  (SELECT 
    s.`NAME` 
  FROM
    `sys_user` s 
  WHERE s.`USER_ID` = o.CREATE_BY) AS CREATE_NAME,
  o.CREATE_BY,
  i.NAME,
  i.SPECIFICATION,
  i.UNIT,
  i.TYPE,
  i.PRICE,
  i.NUM,
  i.AMOUNT,
  '1' AS UNTYPE 
FROM
  `tt_out_storage` o 
  LEFT JOIN `tt_item_storage` i 
    ON o.`ITEM_STORAGE_ID` = i.`ITEM_STORAGE_ID` 
  LEFT JOIN `tt_out_task` tu 
    ON o.`OUT_STORAGE_ID` = tu.`OUT_STORAGE_ID` 
WHERE tu.`OUT_STORAGE_OBJ` = `findTaskListByPid` (#{pd.TASK_ID,jdbcType=VARCHAR}) 
		AND o.`IS_DEL`=0
		
		<if test="pd.NAME != null and pd.NAME != ''"><!-- 关键词检索 -->
			and
				(
					 i.NAME LIKE CONCAT(CONCAT('%', #{pd.NAME}),'%')
					 or 
					 i.SPECIFICATION LIKE CONCAT(CONCAT('%', #{pd.NAME}),'%') 
					  or 
					 i.UNIT LIKE CONCAT(CONCAT('%', #{pd.NAME}),'%') 
				)
		</if>
		
		UNION 
	SELECT  ITEM_PAYMENT_ID AS OUT_STORAGE_ID,NULL AS ITEM_STORAGE_ID,NULL AS OUT_STORAGE_NO,
	taskName(tt_item_payment.payment_obj) AS OUT_STORAGE_OBJ,NULL AS OBJ_ID,NULL AS OUT_OBJ_MARK,NULL AS RECEIVE_USER,NULL AS outPrice,
	NULL AS outNum, PAYMENT_AMOUNT AS outAmout,PAYMENT_CONFIRM as CONFIRM_STATE,(SELECT s.`NAME` FROM `sys_user` s WHERE s.`USER_ID`=tt_item_payment.CONFIRM_USER ) AS CONFIRM_USER,
	CREATE_DATE,(SELECT s.`NAME` FROM `sys_user` s WHERE s.`USER_ID`=tt_item_payment.CREATE_BY )AS CREATE_NAME,
	 CREATE_BY, 
			'其他' AS NAME,
			NULL AS SPECIFICATION,
			NULL AS UNIT,
			 NULL AS TYPE,
			NULL AS PRICE,
			NULL AS NUM,
			NULL AS AMOUNT,'2' as UNTYPE FROM `tt_item_payment` WHERE payment_obj=#{pd.TASK_ID} AND is_del=0
UNION
SELECT 
  LEASE_TASK_ID AS OUT_STORAGE_ID,
  NULL AS ITEM_STORAGE_ID,
  NULL AS OUT_STORAGE_NO,
  taskName (tt_lease_task.`TASK_ID`) AS OUT_STORAGE_OBJ,
  NULL AS OBJ_ID,
  NULL AS OUT_OBJ_MARK,
  NULL AS RECEIVE_USER,
  NULL AS outPrice,
  NULL AS outNum,
  (SELECT 
    t.`MARK_MONEY` 
  FROM
    `tt_pactinfo` t 
  WHERE t.`PACT_ID` = tt_lease_task.PACT_ID) AS outAmout,
  '1' AS CONFIRM_STATE,
  (SELECT 
    s.`NAME` 
  FROM
    `sys_user` s 
  WHERE s.`USER_ID` = tt_lease_task.CREATE_BY) AS CONFIRM_USER,
  CREATE_DATE,
  (SELECT 
    s.`NAME` 
  FROM
    `sys_user` s 
  WHERE s.`USER_ID` = tt_lease_task.CREATE_BY) AS CREATE_NAME,
  CREATE_BY,
  (SELECT 
    t.`PACT_NAME` 
  FROM
    `tt_pactinfo` t 
  WHERE t.`PACT_ID` = tt_lease_task.PACT_ID) AS NAME,
  NULL AS SPECIFICATION,
  NULL AS UNIT,
  NULL AS TYPE,
  NULL AS PRICE,
  NULL AS NUM,
  NULL AS AMOUNT,
  '3' AS UNTYPE 
FROM
  `tt_lease_task` 
WHERE task_id = #{pd.TASK_ID}
  AND is_del = 0 
  </select>
  
  
  <select id="findTaskActualByTaskid" resultType="pd" parameterType="pd">
		SELECT 
		  o.OUT_STORAGE_ID,
		  o.ITEM_STORAGE_ID,
		  o.OUT_STORAGE_NO,
		  taskName(o.OUT_STORAGE_OBJ) AS OUT_STORAGE_OBJ,o.`OUT_STORAGE_OBJ` AS OBJ_ID,
		  o.OUT_OBJ_MARK,
		  o.RECEIVE_USER,
		  o.PRICE AS outPrice,
		  o.NUM AS outNum,
		  o.AMOUNT AS outAmout,
		   o.CONFIRM_STATE,
		  (SELECT s.`NAME` FROM `sys_user` s WHERE s.`USER_ID`=o.CONFIRM_USER ) AS CONFIRM_USER,
		  o.CREATE_DATE,
		  (SELECT s.`NAME` FROM `sys_user` s WHERE s.`USER_ID`=o.CREATE_BY )AS CREATE_NAME,
		  o.CREATE_BY, 
			i.NAME,
			i.SPECIFICATION,
			i.UNIT,
			i.TYPE,
			i.PRICE,
			i.NUM,
			i.AMOUNT,
			'1' as UNTYPE
		 FROM `tt_out_storage` o LEFT JOIN `tt_item_storage` i ON o.`ITEM_STORAGE_ID`=i.`ITEM_STORAGE_ID`
		WHERE  FIND_IN_SET (o.OUT_STORAGE_OBJ,
    (SELECT 
      `findTaskListByPid` (#{TASK_ID})))
		AND o.`IS_DEL`=0
		
		UNION 
	SELECT  ITEM_PAYMENT_ID AS OUT_STORAGE_ID,NULL AS ITEM_STORAGE_ID,NULL AS OUT_STORAGE_NO,
	taskName(tt_item_payment.payment_obj) AS OUT_STORAGE_OBJ,NULL AS OBJ_ID,NULL AS OUT_OBJ_MARK,NULL AS RECEIVE_USER,NULL AS outPrice,
	NULL AS outNum, PAYMENT_AMOUNT AS outAmout,PAYMENT_CONFIRM as CONFIRM_STATE,(SELECT s.`NAME` FROM `sys_user` s WHERE s.`USER_ID`=tt_item_payment.CONFIRM_USER ) AS CONFIRM_USER,
	CREATE_DATE,(SELECT s.`NAME` FROM `sys_user` s WHERE s.`USER_ID`=tt_item_payment.CREATE_BY )AS CREATE_NAME,
	 CREATE_BY, 
			'其他' AS NAME,
			NULL AS SPECIFICATION,
			NULL AS UNIT,
			 NULL AS TYPE,
			NULL AS PRICE,
			NULL AS NUM,
			NULL AS AMOUNT,'2' as UNTYPE FROM `tt_item_payment` WHERE payment_obj=#{TASK_ID} AND is_del=0
  </select>
  
  
  
  <select id="TaskActualByTaskidTab"  resultType="pd" parameterType="page">
 SELECT 
		  o.OUT_STORAGE_ID,
		  o.ITEM_STORAGE_ID,
		  o.OUT_STORAGE_NO,
		  taskName(o.OUT_STORAGE_OBJ) AS OUT_STORAGE_OBJ,o.`OUT_STORAGE_OBJ` AS OBJ_ID,
		  o.OUT_OBJ_MARK,
		  o.RECEIVE_USER,
		  o.PRICE AS outPrice,
		  o.NUM AS outNum,
		  o.AMOUNT AS outAmout,
		   o.CONFIRM_STATE,
		  (SELECT s.`NAME` FROM `sys_user` s WHERE s.`USER_ID`=o.CONFIRM_USER ) AS CONFIRM_USER,
		  o.CREATE_DATE,
		  (SELECT s.`NAME` FROM `sys_user` s WHERE s.`USER_ID`=o.CREATE_BY )AS CREATE_NAME,
		  o.CREATE_BY, 
			i.NAME,
			i.SPECIFICATION,
			i.UNIT,
			i.TYPE,
			i.PRICE,
			i.NUM,
			i.AMOUNT,
			'1' as UNTYPE
		 FROM `tt_out_storage` o LEFT JOIN `tt_item_storage` i ON o.`ITEM_STORAGE_ID`=i.`ITEM_STORAGE_ID`
		WHERE  FIND_IN_SET (o.OUT_STORAGE_OBJ,
    (SELECT 
      `findTaskListByPid` (#{pd.TASK_ID})))
		AND o.`IS_DEL`=0
		UNION 
	SELECT  ITEM_PAYMENT_ID AS OUT_STORAGE_ID,NULL AS ITEM_STORAGE_ID,NULL AS OUT_STORAGE_NO,
	taskName(tt_item_payment.payment_obj) AS OUT_STORAGE_OBJ,NULL AS OBJ_ID,NULL AS OUT_OBJ_MARK,NULL AS RECEIVE_USER,NULL AS outPrice,
	NULL AS outNum, PAYMENT_AMOUNT AS outAmout,PAYMENT_CONFIRM as CONFIRM_STATE,(SELECT s.`NAME` FROM `sys_user` s WHERE s.`USER_ID`=tt_item_payment.CONFIRM_USER ) AS CONFIRM_USER,
	CREATE_DATE,(SELECT s.`NAME` FROM `sys_user` s WHERE s.`USER_ID`=tt_item_payment.CREATE_BY )AS CREATE_NAME,
	 CREATE_BY, 
			'其他' AS NAME,
			NULL AS SPECIFICATION,
			NULL AS UNIT,
			 NULL AS TYPE,
			NULL AS PRICE,
			NULL AS NUM,
			NULL AS AMOUNT,'2' as UNTYPE FROM `tt_item_payment` WHERE payment_obj=#{pd.TASK_ID} AND is_del=0
  </select>
</mapper>